// This file has been generated by Py++.

#include "boost/python.hpp"

#include "__array_1.pypp.hpp"

#include "../Code/Monocle.h"
#include "../Code/Graphics/SpriteAnimation.h"

namespace bp = boost::python;

struct Asset_wrapper : Monocle::Asset, bp::wrapper< Monocle::Asset > {

    Asset_wrapper(::Monocle::AssetType type )
    : Monocle::Asset( type )
      , bp::wrapper< Monocle::Asset >(){
        // constructor
    
    }

    virtual void Reload(  ){
        bp::override func_Reload = this->get_override( "Reload" );
        func_Reload(  );
    }

    virtual void Unload(  ){
        bp::override func_Unload = this->get_override( "Unload" );
        func_Unload(  );
    }

};

struct Assets_wrapper : Monocle::Assets, bp::wrapper< Monocle::Assets > {

    Assets_wrapper(Monocle::Assets const & arg )
    : Monocle::Assets( arg )
      , bp::wrapper< Monocle::Assets >(){
        // copy constructor
        
    }

    Assets_wrapper( )
    : Monocle::Assets( )
      , bp::wrapper< Monocle::Assets >(){
        // null constructor
    
    }

    static void RemoveAsset( ::Monocle::Asset * asset ){
        Monocle::Assets::RemoveAsset( boost::python::ptr(asset) );
    }

};

struct Monocle_wrapper
{
	double get_deltaTime()
	{
		return Monocle::deltaTime;
	}

	float get_deg2Rad()
	{
		return Monocle::deg2Rad;
	}

	float get_pi()
	{
		return Monocle::pi;
	}

	float get_rad2Deg()
	{
		return Monocle::rad2Deg;
	}

	double get_timeSinceStart()
	{
		return Monocle::timeSinceStart;
	}

	std::string GetWorkingDirectory()
	{
		return Monocle::GetWorkingDirectory();
	}

	void OpenURL(const std::string &url)
	{
		Monocle::OpenURL(url);
	}

};

struct Macro_wrapper
{
	float MIN(float a, float b)
	{
		return a < b ? a : b;
	}
	float MAX(float a, float b)
	{
		return a > b ? a : b;
	}
	float CLAMP(float a, float min, float max)
	{
		return MIN(MAX(a, max), min);
	}
	float SIGN(float value, float to)
	{
		return (value < 0) ? -to : ((value > 0) ? to : 0);
	}
	float APPROACH(float value, float target, float amount)
	{
		return (value >= target) ? MAX(value - amount, target) : MIN(value + amount, target);
	}
	float LERP(float a, float b, float t)
	{
		return (a + (b - a) * t);
	}
};

struct Collider_wrapper : Monocle::Collider, bp::wrapper< Monocle::Collider > {

    Collider_wrapper( )
    : Monocle::Collider( )
      , bp::wrapper< Monocle::Collider >(){
        // null constructor
    
    }

    virtual ::Monocle::ColliderType GetColliderType(  ){
        bp::override func_GetColliderType = this->get_override( "GetColliderType" );
        return func_GetColliderType(  );
    }

    virtual bool IntersectsLine( ::Monocle::Vector2 const & start, ::Monocle::Vector2 const & end ){
        bp::override func_IntersectsLine = this->get_override( "IntersectsLine" );
        return func_IntersectsLine( boost::ref(start), boost::ref(end) );
    }

    virtual bool IntersectsPoint( ::Monocle::Vector2 const & point ){
        bp::override func_IntersectsPoint = this->get_override( "IntersectsPoint" );
        return func_IntersectsPoint( boost::ref(point) );
    }

};

struct CircleCollider_wrapper : Monocle::CircleCollider, bp::wrapper< Monocle::CircleCollider > {

    CircleCollider_wrapper(Monocle::CircleCollider const & arg )
    : Monocle::CircleCollider( arg )
      , bp::wrapper< Monocle::CircleCollider >(){
        // copy constructor
        
    }

    CircleCollider_wrapper(float radius, ::Monocle::Vector2 offset=Monocle::Vector2::zero )
    : Monocle::CircleCollider( radius, offset )
      , bp::wrapper< Monocle::CircleCollider >(){
        // constructor
    
    }

    virtual ::Monocle::ColliderType GetColliderType(  ) {
        if( bp::override func_GetColliderType = this->get_override( "GetColliderType" ) )
            return func_GetColliderType(  );
        else
            return this->Monocle::CircleCollider::GetColliderType(  );
    }
    
    
    ::Monocle::ColliderType default_GetColliderType(  ) {
        return Monocle::CircleCollider::GetColliderType( );
    }

    virtual bool IntersectsLine( ::Monocle::Vector2 const & start, ::Monocle::Vector2 const & end ) {
        if( bp::override func_IntersectsLine = this->get_override( "IntersectsLine" ) )
            return func_IntersectsLine( boost::ref(start), boost::ref(end) );
        else
            return this->Monocle::CircleCollider::IntersectsLine( boost::ref(start), boost::ref(end) );
    }
    
    
    bool default_IntersectsLine( ::Monocle::Vector2 const & start, ::Monocle::Vector2 const & end ) {
        return Monocle::CircleCollider::IntersectsLine( boost::ref(start), boost::ref(end) );
    }

    virtual bool IntersectsPoint( ::Monocle::Vector2 const & point ) {
        if( bp::override func_IntersectsPoint = this->get_override( "IntersectsPoint" ) )
            return func_IntersectsPoint( boost::ref(point) );
        else
            return this->Monocle::CircleCollider::IntersectsPoint( boost::ref(point) );
    }
    
    
    bool default_IntersectsPoint( ::Monocle::Vector2 const & point ) {
        return Monocle::CircleCollider::IntersectsPoint( boost::ref(point) );
    }

};

struct Tweener_wrapper : Monocle::Tweener, bp::wrapper< Monocle::Tweener > {

    Tweener_wrapper(float time, ::Monocle::EaseType easeType )
    : Monocle::Tweener( time, easeType )
      , bp::wrapper< Monocle::Tweener >(){
        // constructor
    
    }

    virtual void SetValue( float p ){
        bp::override func_SetValue = this->get_override( "SetValue" );
        func_SetValue( p );
    }

    void Update(  ){
        Monocle::Tweener::Update(  );
    }

};

struct ColorTweener_wrapper : Monocle::ColorTweener, bp::wrapper< Monocle::ColorTweener > {

    void Update(  ){
        Monocle::Tweener::Update(  );
    }

};

struct Entity_wrapper : Monocle::Entity, bp::wrapper< Monocle::Entity > {

    Entity_wrapper(Monocle::Entity const & arg )
    : Monocle::Entity( arg )
      , bp::wrapper< Monocle::Entity >(){
        // copy constructor
        
    }

    Entity_wrapper( )
    : Monocle::Entity( )
      , bp::wrapper< Monocle::Entity >(){
        // null constructor
    
    }

    virtual void Added(  ) {
        if( bp::override func_Added = this->get_override( "Added" ) )
            func_Added(  );
        else
            this->Monocle::Entity::Added(  );
    }
    
    
    void default_Added(  ) {
        Monocle::Entity::Added( );
    }

    virtual void ReceiveNote( ::std::string const & tag, ::std::string const & note ){
        if( bp::override func_ReceiveNote = this->get_override( "ReceiveNote" ) )
            func_ReceiveNote( tag, note );
        else
            this->Monocle::Entity::ReceiveNote( tag, note );
    }

    virtual void Removed(  ) {
        if( bp::override func_Removed = this->get_override( "Removed" ) )
            func_Removed(  );
        else
            this->Monocle::Entity::Removed(  );
    }
    
    
    void default_Removed(  ) {
        Monocle::Entity::Removed( );
    }

    virtual void Render(  ) {
        if( bp::override func_Render = this->get_override( "Render" ) )
            func_Render(  );
        else
            this->Monocle::Entity::Render(  );
    }
    
    
    void default_Render(  ) {
        Monocle::Entity::Render( );
    }

    void SendNote( ::std::string const & tag, ::std::string const & note ){
        Monocle::Entity::SendNote( tag, note );
    }

    void SendNoteToScene( ::std::string const & note ){
        Monocle::Entity::SendNoteToScene( note );
    }

    virtual void Update(  ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update(  );
        else
            this->Monocle::Entity::Update(  );
    }
    
    
    void default_Update(  ) {
        Monocle::Entity::Update( );
    }

    static ::Monocle::Scene * get_scene(Monocle::Entity const & inst ){
        return inst.scene;
    }
    
    static void set_scene( Monocle::Entity & inst, ::Monocle::Scene * new_value ){ 
        inst.scene = new_value;
    }

};

struct FloatTweener_wrapper : Monocle::FloatTweener, bp::wrapper< Monocle::FloatTweener > {

    void Update(  ){
        Monocle::Tweener::Update(  );
    }

};

struct Graphic_wrapper : Monocle::Graphic, bp::wrapper< Monocle::Graphic > {

    Graphic_wrapper()
    : Monocle::Graphic()
      , bp::wrapper< Monocle::Graphic >(){
        // null constructor
        
    }

    virtual void GetWidthHeight( int * width, int * height ){
        bp::override func_GetWidthHeight = this->get_override( "GetWidthHeight" );
        func_GetWidthHeight( width, height );
    }

    virtual void Render(  ){
        bp::override func_Render = this->get_override( "Render" );
        func_Render(  );
    }

    static ::Monocle::Entity * get_entity(Monocle::Graphic const & inst ){
        return inst.entity;
    }
    
    static void set_entity( Monocle::Graphic & inst, ::Monocle::Entity * new_value ){ 
        inst.entity = new_value;
    }

};

struct Sprite_wrapper : Monocle::Sprite, bp::wrapper< Monocle::Sprite > {

    Sprite_wrapper(Monocle::Sprite const & arg )
    : Monocle::Sprite( arg )
      , bp::wrapper< Monocle::Sprite >(){
        // copy constructor
        
    }

    Sprite_wrapper(::std::string const & filename, float width=-0x000000001, float height=-0x000000001 )
    : Monocle::Sprite( filename, width, height )
      , bp::wrapper< Monocle::Sprite >(){
        // constructor
    
    }

    Sprite_wrapper(::std::string const & filename, ::Monocle::FilterType filter, float width=-0x000000001, float height=-0x000000001 )
    : Monocle::Sprite( filename, filter, width, height )
      , bp::wrapper< Monocle::Sprite >(){
        // constructor
    
    }

    Sprite_wrapper( )
    : Monocle::Sprite( )
      , bp::wrapper< Monocle::Sprite >(){
        // null constructor
    
    }

    virtual void GetWidthHeight( int * width, int * height ) {
        if( bp::override func_GetWidthHeight = this->get_override( "GetWidthHeight" ) )
            func_GetWidthHeight( width, height );
        else
            this->Monocle::Sprite::GetWidthHeight( width, height );
    }
    
    
    void default_GetWidthHeight( int * width, int * height ) {
        Monocle::Sprite::GetWidthHeight( width, height );
    }

    virtual void Render(  ) {
        if( bp::override func_Render = this->get_override( "Render" ) )
            func_Render(  );
        else
            this->Monocle::Sprite::Render(  );
    }
    
    
    void default_Render(  ) {
        Monocle::Sprite::Render( );
    }

    static ::Monocle::TextureAsset * get_texture(Monocle::Sprite const & inst ){
        return inst.texture;
    }
    
    static void set_texture( Monocle::Sprite & inst, ::Monocle::TextureAsset * new_value ){ 
        inst.texture = new_value;
    }

};

struct SpriteAnimation_wrapper : Monocle::SpriteAnimation, bp::wrapper< Monocle::SpriteAnimation > {

    SpriteAnimation_wrapper(Monocle::SpriteAnimation const & arg )
    : Monocle::SpriteAnimation( arg )
      , bp::wrapper< Monocle::SpriteAnimation >(){
        // copy constructor
        
    }

    SpriteAnimation_wrapper(::std::string const & filename, ::Monocle::FilterType filter, float width, float height )
    : Monocle::SpriteAnimation( filename, filter, width, height )
      , bp::wrapper< Monocle::SpriteAnimation >(){
        // constructor
    
    }

    virtual void Render(  ) {
        if( bp::override func_Render = this->get_override( "Render" ) )
            func_Render(  );
        else
            this->Monocle::SpriteAnimation::Render(  );
    }
    
    
    void default_Render(  ) {
        Monocle::SpriteAnimation::Render( );
    }

    static ::Monocle::Anim * get_animation(Monocle::SpriteAnimation const & inst ){
        return inst.animation;
    }
    
    static void set_animation( Monocle::SpriteAnimation & inst, ::Monocle::Anim * new_value ){ 
        inst.animation = new_value;
    }

    virtual void GetWidthHeight( int * width, int * height ) {
        if( bp::override func_GetWidthHeight = this->get_override( "GetWidthHeight" ) )
            func_GetWidthHeight( width, height );
        else
            this->Monocle::Sprite::GetWidthHeight( width, height );
    }
    
    
    void default_GetWidthHeight( int * width, int * height ) {
        Monocle::Sprite::GetWidthHeight( width, height );
    }

};

struct FringeTile_wrapper : Monocle::FringeTile, bp::wrapper< Monocle::FringeTile > {

    FringeTile_wrapper(Monocle::FringeTile const & arg )
    : Monocle::FringeTile( arg )
      , bp::wrapper< Monocle::FringeTile >(){
        // copy constructor
        
    }

    FringeTile_wrapper(::Monocle::FringeTileset * fringeTileset, int tileID )
    : Monocle::FringeTile( boost::python::ptr(fringeTileset), tileID )
      , bp::wrapper< Monocle::FringeTile >(){
        // constructor
    
    }

    virtual void GetWidthHeight( int * width, int * height ) {
        if( bp::override func_GetWidthHeight = this->get_override( "GetWidthHeight" ) )
            func_GetWidthHeight( width, height );
        else
            this->Monocle::Sprite::GetWidthHeight( width, height );
    }
    
    
    void default_GetWidthHeight( int * width, int * height ) {
        Monocle::Sprite::GetWidthHeight( width, height );
    }

    virtual void Render(  ) {
        if( bp::override func_Render = this->get_override( "Render" ) )
            func_Render(  );
        else
            this->Monocle::Sprite::Render(  );
    }
    
    
    void default_Render(  ) {
        Monocle::Sprite::Render( );
    }

};

struct Game_wrapper : Monocle::Game, bp::wrapper< Monocle::Game > {

    Game_wrapper(Monocle::Game const & arg )
    : Monocle::Game( arg )
      , bp::wrapper< Monocle::Game >(){
        // copy constructor
        
    }

    Game_wrapper( )
    : Monocle::Game( )
      , bp::wrapper< Monocle::Game >(){
        // null constructor
    
    }

    virtual void Init(  ) {
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else
            this->Monocle::Game::Init(  );
    }
    
    
    void default_Init(  ) {
        Monocle::Game::Init( );
    }

    virtual void ReceiveNote( ::std::string const & note ) {
        if( bp::override func_ReceiveNote = this->get_override( "ReceiveNote" ) )
            func_ReceiveNote( note );
        else
            this->Monocle::Game::ReceiveNote( note );
    }
    
    
    void default_ReceiveNote( ::std::string const & note ) {
        Monocle::Game::ReceiveNote( note );
    }

};

struct Scene_wrapper : Monocle::Scene, bp::wrapper< Monocle::Scene > {

    Scene_wrapper(Monocle::Scene const & arg )
    : Monocle::Scene( arg )
      , bp::wrapper< Monocle::Scene >(){
        // copy constructor
        
    }

    Scene_wrapper( )
    : Monocle::Scene( )
      , bp::wrapper< Monocle::Scene >(){
        // null constructor
    
    }

    virtual void Begin(  ) {
        if( bp::override func_Begin = this->get_override( "Begin" ) )
            func_Begin(  );
        else
            this->Monocle::Scene::Begin(  );
    }
    
    
    void default_Begin(  ) {
        Monocle::Scene::Begin( );
    }

    virtual void End(  ) {
        if( bp::override func_End = this->get_override( "End" ) )
            func_End(  );
        else
            this->Monocle::Scene::End(  );
    }
    
    
    void default_End(  ) {
        Monocle::Scene::End( );
    }

    virtual void ReceiveNote( ::std::string const & note ){
        if( bp::override func_ReceiveNote = this->get_override( "ReceiveNote" ) )
            func_ReceiveNote( note );
        else
            this->Monocle::Scene::ReceiveNote( note );
    }

    virtual void Update(  ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update(  );
        else
            this->Monocle::Scene::Update(  );
    }
    
    
    void default_Update(  ) {
        Monocle::Scene::Update( );
    }

};

struct Platform_wrapper : Monocle::Platform, bp::wrapper< Monocle::Platform > {

    Platform_wrapper(Monocle::Platform const & arg )
    : Monocle::Platform( arg )
      , bp::wrapper< Monocle::Platform >(){
        // copy constructor
        
    }

    Platform_wrapper( )
    : Monocle::Platform( )
      , bp::wrapper< Monocle::Platform >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< bool, 323>
    pyplusplus_keys_wrapper( ::Monocle::Platform & inst ){
        return pyplusplus::containers::static_sized::array_1_t< bool, 323>( inst.keys );
    }

    static pyplusplus::containers::static_sized::array_1_t< bool, 3>
    pyplusplus_mouseButtons_wrapper( ::Monocle::Platform & inst ){
        return pyplusplus::containers::static_sized::array_1_t< bool, 3>( inst.mouseButtons );
    }

};

struct RectangleCollider_wrapper : Monocle::RectangleCollider, bp::wrapper< Monocle::RectangleCollider > {

    RectangleCollider_wrapper(Monocle::RectangleCollider const & arg )
    : Monocle::RectangleCollider( arg )
      , bp::wrapper< Monocle::RectangleCollider >(){
        // copy constructor
        
    }

    RectangleCollider_wrapper(float width, float height, ::Monocle::Vector2 offset=Monocle::Vector2::zero )
    : Monocle::RectangleCollider( width, height, offset )
      , bp::wrapper< Monocle::RectangleCollider >(){
        // constructor
    
    }

    virtual ::Monocle::ColliderType GetColliderType(  ) {
        if( bp::override func_GetColliderType = this->get_override( "GetColliderType" ) )
            return func_GetColliderType(  );
        else
            return this->Monocle::RectangleCollider::GetColliderType(  );
    }
    
    
    ::Monocle::ColliderType default_GetColliderType(  ) {
        return Monocle::RectangleCollider::GetColliderType( );
    }

    virtual bool IntersectsLine( ::Monocle::Vector2 const & start, ::Monocle::Vector2 const & end ) {
        if( bp::override func_IntersectsLine = this->get_override( "IntersectsLine" ) )
            return func_IntersectsLine( boost::ref(start), boost::ref(end) );
        else
            return this->Monocle::RectangleCollider::IntersectsLine( boost::ref(start), boost::ref(end) );
    }
    
    
    bool default_IntersectsLine( ::Monocle::Vector2 const & start, ::Monocle::Vector2 const & end ) {
        return Monocle::RectangleCollider::IntersectsLine( boost::ref(start), boost::ref(end) );
    }

    virtual bool IntersectsPoint( ::Monocle::Vector2 const & point ) {
        if( bp::override func_IntersectsPoint = this->get_override( "IntersectsPoint" ) )
            return func_IntersectsPoint( boost::ref(point) );
        else
            return this->Monocle::RectangleCollider::IntersectsPoint( boost::ref(point) );
    }
    
    
    bool default_IntersectsPoint( ::Monocle::Vector2 const & point ) {
        return Monocle::RectangleCollider::IntersectsPoint( boost::ref(point) );
    }

};

struct TextureAsset_wrapper : Monocle::TextureAsset, bp::wrapper< Monocle::TextureAsset > {

    TextureAsset_wrapper(Monocle::TextureAsset const & arg )
    : Monocle::TextureAsset( arg )
      , bp::wrapper< Monocle::TextureAsset >(){
        // copy constructor
        
    }

    TextureAsset_wrapper( )
    : Monocle::TextureAsset( )
      , bp::wrapper< Monocle::TextureAsset >(){
        // null constructor
    
    }

    virtual void Reload(  ) {
        if( bp::override func_Reload = this->get_override( "Reload" ) )
            func_Reload(  );
        else
            this->Monocle::TextureAsset::Reload(  );
    }
    
    
    void default_Reload(  ) {
        Monocle::TextureAsset::Reload( );
    }

    virtual void Unload(  ) {
        if( bp::override func_Unload = this->get_override( "Unload" ) )
            func_Unload(  );
        else
            this->Monocle::TextureAsset::Unload(  );
    }
    
    
    void default_Unload(  ) {
        Monocle::TextureAsset::Unload( );
    }

};

struct Tilemap_wrapper : Monocle::Tilemap, bp::wrapper< Monocle::Tilemap > {

    Tilemap_wrapper(Monocle::Tilemap const & arg )
    : Monocle::Tilemap( arg )
      , bp::wrapper< Monocle::Tilemap >(){
        // copy constructor
        
    }

    Tilemap_wrapper(::Monocle::Tileset * tileset, int width, int height, int tileWidth, int tileHeight )
    : Monocle::Tilemap( boost::python::ptr(tileset), width, height, tileWidth, tileHeight )
      , bp::wrapper< Monocle::Tilemap >(){
        // constructor
    
    }

    virtual void GetWidthHeight( int * width, int * height ) {
        if( bp::override func_GetWidthHeight = this->get_override( "GetWidthHeight" ) )
            func_GetWidthHeight( width, height );
        else
            this->Monocle::Tilemap::GetWidthHeight( width, height );
    }
    
    
    void default_GetWidthHeight( int * width, int * height ) {
        Monocle::Tilemap::GetWidthHeight( width, height );
    }

    virtual void Render(  ) {
        if( bp::override func_Render = this->get_override( "Render" ) )
            func_Render(  );
        else
            this->Monocle::Tilemap::Render(  );
    }
    
    
    void default_Render(  ) {
        Monocle::Tilemap::Render( );
    }

    static ::Monocle::TextureAsset * get_texture(Monocle::Tilemap const & inst ){
        return inst.texture;
    }
    
    static void set_texture( Monocle::Tilemap & inst, ::Monocle::TextureAsset * new_value ){ 
        inst.texture = new_value;
    }

};

struct Tileset_wrapper : Monocle::Tileset, bp::wrapper< Monocle::Tileset > {

    Tileset_wrapper(Monocle::Tileset const & arg )
    : Monocle::Tileset( arg )
      , bp::wrapper< Monocle::Tileset >(){
        // copy constructor
        
    }

    Tileset_wrapper(::std::string const & name, ::std::string const & filename, float tileWidth, float tileHeight )
    : Monocle::Tileset( name, filename, tileWidth, tileHeight )
      , bp::wrapper< Monocle::Tileset >(){
        // constructor
    
    }

    static ::Monocle::TextureAsset * get_texture(Monocle::Tileset const & inst ){
        return inst.texture;
    }
    
    static void set_texture( Monocle::Tileset & inst, ::Monocle::TextureAsset * new_value ){ 
        inst.texture = new_value;
    }

};

struct Vector2Tweener_wrapper : Monocle::Vector2Tweener, bp::wrapper< Monocle::Vector2Tweener > {

    void Update(  ){
        Monocle::Tweener::Update(  );
    }

};

BOOST_PYTHON_MODULE(Monocle){
    bp::enum_< Monocle::AssetType>("AssetType")
        .value("ASSET_UNDEFINED", Monocle::ASSET_UNDEFINED)
        .value("ASSET_TEXTURE", Monocle::ASSET_TEXTURE)
        .value("ASSET_AUDIO", Monocle::ASSET_AUDIO)
        .value("ASSET_MAX", Monocle::ASSET_MAX)
        .export_values()
        ;

    bp::enum_< Monocle::ColliderType>("ColliderType")
        .value("CT_RECT", Monocle::CT_RECT)
        .value("CT_CIRCLE", Monocle::CT_CIRCLE)
        .value("CT_POLYGON", Monocle::CT_POLYGON)
        .export_values()
        ;

    bp::enum_< Monocle::EaseType>("EaseType")
        .value("EASE_LINEAR", Monocle::EASE_LINEAR)
        .value("EASE_INOUTSIN", Monocle::EASE_INOUTSIN)
        .value("EASE_INSIN", Monocle::EASE_INSIN)
        .value("EASE_OUTSIN", Monocle::EASE_OUTSIN)
        .value("EASE_INQUAD", Monocle::EASE_INQUAD)
        .value("EASE_OUTQUAD", Monocle::EASE_OUTQUAD)
        .value("EASE_INOUTQUAD", Monocle::EASE_INOUTQUAD)
        .value("EASE_INBOUNCE", Monocle::EASE_INBOUNCE)
        .value("EASE_OUTBOUNCE", Monocle::EASE_OUTBOUNCE)
        .value("EASE_INOUTBOUNCE", Monocle::EASE_INOUTBOUNCE)
        .value("EASE_MAX", Monocle::EASE_MAX)
        .export_values()
        ;

    bp::enum_< Monocle::FilterType>("FilterType")
        .value("FILTER_NONE", Monocle::FILTER_NONE)
        .value("FILTER_LINEAR", Monocle::FILTER_LINEAR)
        .export_values()
        ;

    bp::enum_< Monocle::KeyCode>("KeyCode")
        .value("KEY_UNDEFINED", Monocle::KEY_UNDEFINED)
        .value("KEY_BACKSPACE", Monocle::KEY_BACKSPACE)
        .value("KEY_TAB", Monocle::KEY_TAB)
        .value("KEY_CLEAR", Monocle::KEY_CLEAR)
        .value("KEY_RETURN", Monocle::KEY_RETURN)
        .value("KEY_PAUSE", Monocle::KEY_PAUSE)
        .value("KEY_ESCAPE", Monocle::KEY_ESCAPE)
        .value("KEY_SPACE", Monocle::KEY_SPACE)
        .value("KEY_QUOTE", Monocle::KEY_QUOTE)
        .value("KEY_COMMA", Monocle::KEY_COMMA)
        .value("KEY_MINUS", Monocle::KEY_MINUS)
        .value("KEY_PERIOD", Monocle::KEY_PERIOD)
        .value("KEY_SLASH", Monocle::KEY_SLASH)
        .value("KEY_0", Monocle::KEY_0)
        .value("KEY_1", Monocle::KEY_1)
        .value("KEY_2", Monocle::KEY_2)
        .value("KEY_3", Monocle::KEY_3)
        .value("KEY_4", Monocle::KEY_4)
        .value("KEY_5", Monocle::KEY_5)
        .value("KEY_6", Monocle::KEY_6)
        .value("KEY_7", Monocle::KEY_7)
        .value("KEY_8", Monocle::KEY_8)
        .value("KEY_9", Monocle::KEY_9)
        .value("KEY_SEMICOLON", Monocle::KEY_SEMICOLON)
        .value("KEY_EQUALS", Monocle::KEY_EQUALS)
        .value("KEY_LEFTBRACKET", Monocle::KEY_LEFTBRACKET)
        .value("KEY_BACKSLASH", Monocle::KEY_BACKSLASH)
        .value("KEY_LESS", Monocle::KEY_LESS)
        .value("KEY_RIGHTBRACKET", Monocle::KEY_RIGHTBRACKET)
        .value("KEY_BACKQUOTE", Monocle::KEY_BACKQUOTE)
        .value("KEY_A", Monocle::KEY_A)
        .value("KEY_B", Monocle::KEY_B)
        .value("KEY_C", Monocle::KEY_C)
        .value("KEY_D", Monocle::KEY_D)
        .value("KEY_E", Monocle::KEY_E)
        .value("KEY_F", Monocle::KEY_F)
        .value("KEY_G", Monocle::KEY_G)
        .value("KEY_H", Monocle::KEY_H)
        .value("KEY_I", Monocle::KEY_I)
        .value("KEY_J", Monocle::KEY_J)
        .value("KEY_K", Monocle::KEY_K)
        .value("KEY_L", Monocle::KEY_L)
        .value("KEY_M", Monocle::KEY_M)
        .value("KEY_N", Monocle::KEY_N)
        .value("KEY_O", Monocle::KEY_O)
        .value("KEY_P", Monocle::KEY_P)
        .value("KEY_Q", Monocle::KEY_Q)
        .value("KEY_R", Monocle::KEY_R)
        .value("KEY_S", Monocle::KEY_S)
        .value("KEY_T", Monocle::KEY_T)
        .value("KEY_U", Monocle::KEY_U)
        .value("KEY_V", Monocle::KEY_V)
        .value("KEY_W", Monocle::KEY_W)
        .value("KEY_X", Monocle::KEY_X)
        .value("KEY_Y", Monocle::KEY_Y)
        .value("KEY_Z", Monocle::KEY_Z)
        .value("KEY_DELETE", Monocle::KEY_DELETE)
        .value("KEY_KP0", Monocle::KEY_KP0)
        .value("KEY_KP1", Monocle::KEY_KP1)
        .value("KEY_KP2", Monocle::KEY_KP2)
        .value("KEY_KP3", Monocle::KEY_KP3)
        .value("KEY_KP4", Monocle::KEY_KP4)
        .value("KEY_KP5", Monocle::KEY_KP5)
        .value("KEY_KP6", Monocle::KEY_KP6)
        .value("KEY_KP7", Monocle::KEY_KP7)
        .value("KEY_KP8", Monocle::KEY_KP8)
        .value("KEY_KP9", Monocle::KEY_KP9)
        .value("KEY_KP_PERIOD", Monocle::KEY_KP_PERIOD)
        .value("KEY_KP_DIVIDE", Monocle::KEY_KP_DIVIDE)
        .value("KEY_KP_MULTIPLY", Monocle::KEY_KP_MULTIPLY)
        .value("KEY_KP_MINUS", Monocle::KEY_KP_MINUS)
        .value("KEY_KP_PLUS", Monocle::KEY_KP_PLUS)
        .value("KEY_UP", Monocle::KEY_UP)
        .value("KEY_DOWN", Monocle::KEY_DOWN)
        .value("KEY_RIGHT", Monocle::KEY_RIGHT)
        .value("KEY_LEFT", Monocle::KEY_LEFT)
        .value("KEY_INSERT", Monocle::KEY_INSERT)
        .value("KEY_HOME", Monocle::KEY_HOME)
        .value("KEY_END", Monocle::KEY_END)
        .value("KEY_PAGEUP", Monocle::KEY_PAGEUP)
        .value("KEY_PAGEDOWN", Monocle::KEY_PAGEDOWN)
        .value("KEY_F1", Monocle::KEY_F1)
        .value("KEY_F2", Monocle::KEY_F2)
        .value("KEY_F3", Monocle::KEY_F3)
        .value("KEY_F4", Monocle::KEY_F4)
        .value("KEY_F5", Monocle::KEY_F5)
        .value("KEY_F6", Monocle::KEY_F6)
        .value("KEY_F7", Monocle::KEY_F7)
        .value("KEY_F8", Monocle::KEY_F8)
        .value("KEY_F9", Monocle::KEY_F9)
        .value("KEY_F10", Monocle::KEY_F10)
        .value("KEY_F11", Monocle::KEY_F11)
        .value("KEY_F12", Monocle::KEY_F12)
        .value("KEY_F13", Monocle::KEY_F13)
        .value("KEY_F14", Monocle::KEY_F14)
        .value("KEY_F15", Monocle::KEY_F15)
        .value("KEY_NUMLOCK", Monocle::KEY_NUMLOCK)
        .value("KEY_CAPSLOCK", Monocle::KEY_CAPSLOCK)
        .value("KEY_SCROLLOCK", Monocle::KEY_SCROLLOCK)
        .value("KEY_RSHIFT", Monocle::KEY_RSHIFT)
        .value("KEY_LSHIFT", Monocle::KEY_LSHIFT)
        .value("KEY_RCTRL", Monocle::KEY_RCTRL)
        .value("KEY_LCTRL", Monocle::KEY_LCTRL)
        .value("KEY_RALT", Monocle::KEY_RALT)
        .value("KEY_LALT", Monocle::KEY_LALT)
        .value("KEY_RMETA", Monocle::KEY_RMETA)
        .value("KEY_LMETA", Monocle::KEY_LMETA)
        .value("KEY_HELP", Monocle::KEY_HELP)
        .value("KEY_PRINT", Monocle::KEY_PRINT)
        .value("KEY_BREAK", Monocle::KEY_BREAK)
        .value("KEY_MENU", Monocle::KEY_MENU)
        .value("KEY_MAX", Monocle::KEY_MAX)
        .export_values()
        ;

    bp::enum_< Monocle::MouseButton>("MouseButton")
        .value("MOUSE_BUTTON_UNDEFINED", Monocle::MOUSE_BUTTON_UNDEFINED)
        .value("MOUSE_BUTTON_LEFT", Monocle::MOUSE_BUTTON_LEFT)
        .value("MOUSE_BUTTON_RIGHT", Monocle::MOUSE_BUTTON_RIGHT)
        .value("MOUSE_BUTTON_MIDDLE", Monocle::MOUSE_BUTTON_MIDDLE)
        .value("MOUSE_BUTTON_MAX", Monocle::MOUSE_BUTTON_MAX)
        .export_values()
        ;

    bp::enum_< Monocle::SearchType>("SearchType")
        .value("SEARCH_TOP", Monocle::SEARCH_TOP)
        .value("SEARCH_RECURSIVE", Monocle::SEARCH_RECURSIVE)
        .export_values()
        ;
	bp::class_< Monocle::Anim, boost::noncopyable >( "Anim", bp::init< std::string const &, int, int, float >(( bp::arg("name"), bp::arg("start"), bp::arg("end"), bp::arg("speed") )) )    
        //.def( bp::init< >() )    
        .def_readwrite( "end", &Monocle::Anim::end )    
        .def_readwrite( "frame", &Monocle::Anim::frame )    
        .def_readwrite( "isPlaying", &Monocle::Anim::isPlaying )    
        .def_readonly( "name", &Monocle::Anim::name )    
        .def_readwrite( "speed", &Monocle::Anim::speed )    
        .def_readwrite( "start", &Monocle::Anim::start );

    bp::class_< Asset_wrapper, boost::noncopyable >( "Asset", bp::init< Monocle::AssetType >(( bp::arg("type") )) )    
        .def( 
            "AddReference"
            , (void ( ::Monocle::Asset::* )(  ) )( &::Monocle::Asset::AddReference ) )    
        .def( 
            "Reload"
            , bp::pure_virtual( (void ( ::Monocle::Asset::* )(  ) )(&::Monocle::Asset::Reload) ) )    
        .def( 
            "RemoveReference"
            , (void ( ::Monocle::Asset::* )(  ) )( &::Monocle::Asset::RemoveReference ) )    
        .def( 
            "Unload"
            , (void ( Asset_wrapper::* )(  ) )(&Asset_wrapper::Unload) )    
        .def_readwrite( "filename", &Monocle::Asset::filename )    
        .def_readwrite( "isCached", &Monocle::Asset::isCached )    
        .def_readwrite( "referenceCount", &Monocle::Asset::referenceCount )    
        .def_readwrite( "type", &Monocle::Asset::type );

    bp::class_< Assets_wrapper >( "Assets", bp::init< >() )    
        .def( 
            "GetContentPath"
            , (::std::string const & (*)(  ))( &::Monocle::Assets::GetContentPath )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "Init"
            , (void ( ::Monocle::Assets::* )(  ) )( &::Monocle::Assets::Init ) )    
        .def( 
            "RemoveAsset"
            , (void (*)( ::Monocle::Asset * ))(&Assets_wrapper::RemoveAsset)
            , ( bp::arg("asset") ) )    
        .def( 
            "RequestTexture"
            , (::Monocle::TextureAsset * (*)( ::std::string const &,::Monocle::FilterType,bool,bool ))( &::Monocle::Assets::RequestTexture )
            , ( bp::arg("filename"), bp::arg("filter")=::Monocle::FILTER_LINEAR, bp::arg("repeatX")=(bool)(false), bp::arg("repeatY")=(bool)(false) )
            ,   bp::return_value_policy<bp::manage_new_object>() )    
        .def( 
            "SetContentPath"
            , (void (*)( ::std::string const & ))( &::Monocle::Assets::SetContentPath )
            , ( bp::arg("contentPath") ))
        .staticmethod( "GetContentPath" )    
        .staticmethod( "RemoveAsset" )    
        .staticmethod( "RequestTexture" )    
        .staticmethod( "SetContentPath" );

    bp::class_< Monocle::Audio >( "Audio", bp::init< >() )    
        .def( 
            "Init"
            , (void ( ::Monocle::Audio::* )(  ) )( &::Monocle::Audio::Init ) );

    bp::class_< Collider_wrapper, boost::noncopyable >( "Collider", bp::init< >() )    
        .def( 
            "Collide"
            , (bool (*)( ::Monocle::Collider *,::Monocle::Collider * ))( &::Monocle::Collider::Collide )
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "GetColliderType"
            , bp::pure_virtual( (::Monocle::ColliderType ( ::Monocle::Collider::* )(  ) )(&::Monocle::Collider::GetColliderType) ) )    
        .def( 
            "GetEntity"
            , (::Monocle::Entity * ( ::Monocle::Collider::* )(  ) )( &::Monocle::Collider::GetEntity )
            ,  bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetEntityPosition"
            , (::Monocle::Vector2 const & ( ::Monocle::Collider::* )(  ) )( &::Monocle::Collider::GetEntityPosition )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "IntersectsLine"
            , bp::pure_virtual( (bool ( ::Monocle::Collider::* )( ::Monocle::Vector2 const &,::Monocle::Vector2 const & ) )(&::Monocle::Collider::IntersectsLine) )
            , ( bp::arg("start"), bp::arg("end") ) )    
        .def( 
            "IntersectsPoint"
            , bp::pure_virtual( (bool ( ::Monocle::Collider::* )( ::Monocle::Vector2 const & ) )(&::Monocle::Collider::IntersectsPoint) )
            , ( bp::arg("point") ) )    
        .def( 
            "LinesIntersect"
            , (bool (*)( ::Monocle::Vector2 const &,::Monocle::Vector2 const &,::Monocle::Vector2 const &,::Monocle::Vector2 const & ))( &::Monocle::Collider::LinesIntersect )
            , ( bp::arg("aStart"), bp::arg("aEnd"), bp::arg("bStart"), bp::arg("bEnd") ) )    
        .def( 
            "SetEntity"
            , (void ( ::Monocle::Collider::* )( ::Monocle::Entity * ) )( &::Monocle::Collider::SetEntity )
            , ( bp::arg("entity") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())
        .def_readwrite( "offset", &Monocle::Collider::offset )    
        .staticmethod( "Collide" )    
        .staticmethod( "LinesIntersect" );

    { //::Monocle::Vector2
        typedef bp::class_< Monocle::Vector2 > Vector2_exposer_t;
        Vector2_exposer_t Vector2_exposer = Vector2_exposer_t( "Vector2", bp::init< >() );
        bp::scope Vector2_scope( Vector2_exposer );
        Vector2_exposer.def( bp::init< float, float >(( bp::arg("x"), bp::arg("y") )) );
        { //::Monocle::Vector2::Clamp
        
            typedef void ( ::Monocle::Vector2::*Clamp_function_type )( float ) ;
            
            Vector2_exposer.def( 
                "Clamp"
                , Clamp_function_type( &::Monocle::Vector2::Clamp )
                , ( bp::arg("max") ) );
        
        }
        { //::Monocle::Vector2::Cross
        
            typedef float ( ::Monocle::Vector2::*Cross_function_type )( ::Monocle::Vector2 ) ;
            
            Vector2_exposer.def( 
                "Cross"
                , Cross_function_type( &::Monocle::Vector2::Cross )
                , ( bp::arg("other") ) );
        
        }
        { //::Monocle::Vector2::Dot
        
            typedef float ( ::Monocle::Vector2::*Dot_function_type )( ::Monocle::Vector2 ) ;
            
            Vector2_exposer.def( 
                "Dot"
                , Dot_function_type( &::Monocle::Vector2::Dot )
                , ( bp::arg("other") ) );
        
        }
        { //::Monocle::Vector2::GetMagnitude
        
            typedef float ( ::Monocle::Vector2::*GetMagnitude_function_type )(  ) ;
            
            Vector2_exposer.def( 
                "GetMagnitude"
                , GetMagnitude_function_type( &::Monocle::Vector2::GetMagnitude ) );
        
        }
        { //::Monocle::Vector2::GetNormalized
        
            typedef ::Monocle::Vector2 ( ::Monocle::Vector2::*GetNormalized_function_type )(  ) ;
            
            Vector2_exposer.def( 
                "GetNormalized"
                , GetNormalized_function_type( &::Monocle::Vector2::GetNormalized ) );
        
        }
        { //::Monocle::Vector2::GetPerpendicularLeft
        
            typedef ::Monocle::Vector2 ( ::Monocle::Vector2::*GetPerpendicularLeft_function_type )(  ) ;
            
            Vector2_exposer.def( 
                "GetPerpendicularLeft"
                , GetPerpendicularLeft_function_type( &::Monocle::Vector2::GetPerpendicularLeft ) );
        
        }
        { //::Monocle::Vector2::GetPerpendicularRight
        
            typedef ::Monocle::Vector2 ( ::Monocle::Vector2::*GetPerpendicularRight_function_type )(  ) ;
            
            Vector2_exposer.def( 
                "GetPerpendicularRight"
                , GetPerpendicularRight_function_type( &::Monocle::Vector2::GetPerpendicularRight ) );
        
        }
        { //::Monocle::Vector2::GetSquaredMagnitude
        
            typedef float ( ::Monocle::Vector2::*GetSquaredMagnitude_function_type )(  ) ;
            
            Vector2_exposer.def( 
                "GetSquaredMagnitude"
                , GetSquaredMagnitude_function_type( &::Monocle::Vector2::GetSquaredMagnitude ) );
        
        }
        { //::Monocle::Vector2::IsInRange
        
            typedef bool ( ::Monocle::Vector2::*IsInRange_function_type )( float ) ;
            
            Vector2_exposer.def( 
                "IsInRange"
                , IsInRange_function_type( &::Monocle::Vector2::IsInRange )
                , ( bp::arg("range") ) );
        
        }
        { //::Monocle::Vector2::Normalize
        
            typedef void ( ::Monocle::Vector2::*Normalize_function_type )(  ) ;
            
            Vector2_exposer.def( 
                "Normalize"
                , Normalize_function_type( &::Monocle::Vector2::Normalize ) );
        
        }
        { //::Monocle::Vector2::Random
        
            typedef ::Monocle::Vector2 ( *Random_function_type )(  );
            
            Vector2_exposer.def( 
                "Random"
                , Random_function_type( &::Monocle::Vector2::Random ) );
        
        }
        Vector2_exposer.def( bp::self != bp::self );
        Vector2_exposer.def( bp::self *= bp::other< float >() );
        Vector2_exposer.def( bp::self += bp::self );
        Vector2_exposer.def( bp::self -= bp::self );
        Vector2_exposer.def( bp::self /= bp::other< float >() );
        { //::Monocle::Vector2::operator=
        
            typedef ::Monocle::Vector2 & ( ::Monocle::Vector2::*assign_function_type )( ::Monocle::Vector2 const & ) ;
            
            Vector2_exposer.def( 
                "assign"
                , assign_function_type( &::Monocle::Vector2::operator= )
                , ( bp::arg("rhs") )
                , bp::return_self< >() );
        
        }
        Vector2_exposer.def( bp::self == bp::self );
        { //::Monocle::Vector2::operator[]
        
            typedef float ( ::Monocle::Vector2::*__getitem___function_type )( int ) ;
            
            Vector2_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Monocle::Vector2::operator[] )
                , ( bp::arg("i") ) );
        
        }
        Vector2_exposer.def_readwrite( "down", Monocle::Vector2::down );
        Vector2_exposer.def_readwrite( "left", Monocle::Vector2::left );
        Vector2_exposer.def_readwrite( "one", Monocle::Vector2::one );
        Vector2_exposer.def_readwrite( "right", Monocle::Vector2::right );
        Vector2_exposer.def_readwrite( "up", Monocle::Vector2::up );
        Vector2_exposer.def_readwrite( "x", &Monocle::Vector2::x );
        Vector2_exposer.def_readwrite( "y", &Monocle::Vector2::y );
        Vector2_exposer.def_readwrite( "zero", Monocle::Vector2::zero );
        Vector2_exposer.staticmethod( "Random" );
        Vector2_exposer.def( bp::self * bp::self );
        Vector2_exposer.def( bp::self * bp::other< float >() );
        Vector2_exposer.def( bp::other< float >() * bp::self );
        Vector2_exposer.def( bp::self + bp::self );
        Vector2_exposer.def( bp::self - bp::self );
        Vector2_exposer.def( bp::self / bp::other< float >() );
    }

    bp::class_< CircleCollider_wrapper, bp::bases< Monocle::Collider > >( "CircleCollider", bp::init< float, bp::optional< Monocle::Vector2 > >(( bp::arg("radius"), bp::arg("offset")=Monocle::Vector2::zero )) )    
        .def( 
            "GetCenter"
            , (::Monocle::Vector2 const & ( ::Monocle::CircleCollider::* )( bool ) )( &::Monocle::CircleCollider::GetCenter )
            , ( bp::arg("relativeToEntity")=(bool)(false) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetCenterX"
            , (float ( ::Monocle::CircleCollider::* )( bool ) )( &::Monocle::CircleCollider::GetCenterX )
            , ( bp::arg("relativeToEntity")=(bool)(false) ) )    
        .def( 
            "GetCenterY"
            , (float ( ::Monocle::CircleCollider::* )( bool ) )( &::Monocle::CircleCollider::GetCenterY )
            , ( bp::arg("relativeToEntity")=(bool)(false) ) )    
        .def( 
            "GetColliderType"
            , (::Monocle::ColliderType ( ::Monocle::CircleCollider::* )(  ) )(&::Monocle::CircleCollider::GetColliderType)
            , (::Monocle::ColliderType ( CircleCollider_wrapper::* )(  ) )(&CircleCollider_wrapper::default_GetColliderType) )    
        .def( 
            "IntersectsLine"
            , (bool ( ::Monocle::CircleCollider::* )( ::Monocle::Vector2 const &,::Monocle::Vector2 const & ) )(&::Monocle::CircleCollider::IntersectsLine)
            , (bool ( CircleCollider_wrapper::* )( ::Monocle::Vector2 const &,::Monocle::Vector2 const & ) )(&CircleCollider_wrapper::default_IntersectsLine)
            , ( bp::arg("start"), bp::arg("end") ) )    
        .def( 
            "IntersectsPoint"
            , (bool ( ::Monocle::CircleCollider::* )( ::Monocle::Vector2 const & ) )(&::Monocle::CircleCollider::IntersectsPoint)
            , (bool ( CircleCollider_wrapper::* )( ::Monocle::Vector2 const & ) )(&CircleCollider_wrapper::default_IntersectsPoint)
            , ( bp::arg("point") ) )    
        .def_readwrite( "radius", &Monocle::CircleCollider::radius );

    bp::class_< Monocle::Collision >( "Collision", bp::init< >() )    
        .def( 
            "Collide"
            , (::Monocle::Collider * (*)( ::Monocle::Entity *,::std::string const & ))( &::Monocle::Collision::Collide )
            , ( bp::arg("entity"), bp::arg("tag") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "Init"
            , (void ( ::Monocle::Collision::* )(  ) )( &::Monocle::Collision::Init ) )    
        .staticmethod( "Collide" );

    bp::class_< Monocle::Color >( "Color", bp::init< >() )    
        .def( bp::init< float, float, float, float >(( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") )) )    
        .def_readwrite( "a", &Monocle::Color::a )    
        .def_readwrite( "b", &Monocle::Color::b )    
        .def_readwrite( "black", Monocle::Color::black )    
        .def_readwrite( "blue", Monocle::Color::blue )    
        .def_readwrite( "g", &Monocle::Color::g )    
        .def_readwrite( "green", Monocle::Color::green )    
        .def_readwrite( "grey", Monocle::Color::grey )    
        .def_readwrite( "orange", Monocle::Color::orange )    
        .def_readwrite( "r", &Monocle::Color::r )    
        .def_readwrite( "red", Monocle::Color::red )    
        .def_readwrite( "white", Monocle::Color::white )    
        .def_readwrite( "yellow", Monocle::Color::yellow )    
        .def( bp::self * bp::other< float >() )    
        .def( bp::other< float >() * bp::self )    
        .def( bp::self + bp::self )    
        .def( bp::self - bp::self );

    bp::class_< Tweener_wrapper, boost::noncopyable >( "Tweener", bp::no_init )    
        .def( bp::init< float, Monocle::EaseType >(( bp::arg("time"), bp::arg("easeType") )) )    
        .def( 
            "SetValue"
            , (void ( Tweener_wrapper::* )( float ) )(&Tweener_wrapper::SetValue)
            , ( bp::arg("p") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())
        .def( 
            "Update"
            , (void ( Tweener_wrapper::* )(  ) )(&Tweener_wrapper::Update) );

    bp::class_< ColorTweener_wrapper, bp::bases< Monocle::Tweener >, boost::noncopyable >( "ColorTweener", bp::no_init )    
        .def( 
            "Update"
            , (void ( ColorTweener_wrapper::* )(  ) )(&ColorTweener_wrapper::Update) );

    bp::class_< Monocle::Debug >( "Debug" )    
        .def( 
            "Init"
            , (void ( ::Monocle::Debug::* )(  ) )( &::Monocle::Debug::Init ) )    
        .def( 
            "Log"
            , (void (*)( char const * ))( &::Monocle::Debug::Log )
            , ( bp::arg("string") ) )    
        .def( 
            "Log"
            , (void (*)( bool ))( &::Monocle::Debug::Log )
            , ( bp::arg("boolean") ) )    
        .def( 
            "Log"
            , (void (*)( int ))( &::Monocle::Debug::Log )
            , ( bp::arg("num") ) )    
        .def( 
            "Log"
            , (void (*)( long int ))( &::Monocle::Debug::Log )
            , ( bp::arg("num") ) )    
        .def( 
            "Log"
            , (void (*)( float ))( &::Monocle::Debug::Log )
            , ( bp::arg("num") ) )    
        .def( 
            "Log"
            , (void (*)( double ))( &::Monocle::Debug::Log )
            , ( bp::arg("num") ) )    
        .def( 
            "Log"
            , (void (*)( ::Monocle::Vector2 const & ))( &::Monocle::Debug::Log )
            , ( bp::arg("vec") ) )    
        .def( 
            "Log"
            , (void (*)( ::Monocle::Vector3 const & ))( &::Monocle::Debug::Log )
            , ( bp::arg("vec") ) )    
        .def( 
            "Log"
            , (void (*)( ::std::string const & ))( &::Monocle::Debug::Log )
            , ( bp::arg("string") ) )    
        .staticmethod( "Log" );

    bp::class_< Entity_wrapper >( "Entity", bp::init< >() )    
        .def( 
            "Add"
            , (void ( ::Monocle::Entity::* )( ::Monocle::Entity * ) )( &::Monocle::Entity::Add )
            , ( bp::arg("entity") ) )    
        .def( 
            "AddTag"
            , (void ( ::Monocle::Entity::* )( ::std::string const & ) )( &::Monocle::Entity::AddTag )
            , ( bp::arg("tag") ) )    
        .def( 
            "Added"
            , (void ( ::Monocle::Entity::* )(  ) )(&::Monocle::Entity::Added)
            , (void ( Entity_wrapper::* )(  ) )(&Entity_wrapper::default_Added) )    
        .def( 
            "AdjustLayer"
            , (void ( ::Monocle::Entity::* )( int ) )( &::Monocle::Entity::AdjustLayer )
            , ( bp::arg("layerAdjustAmount") ) )    
        .def( 
            "Collide"
            , (::Monocle::Collider * ( ::Monocle::Entity::* )( ::std::string const & ) )( &::Monocle::Entity::Collide )
            , ( bp::arg("tag") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetChildEntityAtPosition"
            , (::Monocle::Entity * ( ::Monocle::Entity::* )( ::Monocle::Vector2 const & ) )( &::Monocle::Entity::GetChildEntityAtPosition )
            , ( bp::arg("position") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetLayer"
            , (int ( ::Monocle::Entity::* )(  ) )( &::Monocle::Entity::GetLayer ) )    
        .def( 
            "GetNumberOfTags"
            , (int ( ::Monocle::Entity::* )(  ) )( &::Monocle::Entity::GetNumberOfTags ) )    
        .def( 
            "GetTag"
            , (::std::string const & ( ::Monocle::Entity::* )( int ) )( &::Monocle::Entity::GetTag )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetWorldPosition"
            , (::Monocle::Vector2 ( ::Monocle::Entity::* )( ::Monocle::Vector2 const & ) )( &::Monocle::Entity::GetWorldPosition )
            , ( bp::arg("position") ) )    
        /*.def( 
            "GetWorldScale"
            , (::Monocle::Vector2 ( ::Monocle::Entity::* )( ::Monocle::Vector2 const & ) )( &::Monocle::Entity::GetWorldScale )
            , ( bp::arg("scale") ) )  */  
        .def( 
            "HasTag"
            , (bool ( ::Monocle::Entity::* )( ::std::string const & ) )( &::Monocle::Entity::HasTag )
            , ( bp::arg("tag") ) )    
        .def( 
            "IsLayer"
            , (bool ( ::Monocle::Entity::* )( int ) )( &::Monocle::Entity::IsLayer )
            , ( bp::arg("layer") ) )    
        .def( 
            "IsPositionInGraphic"
            , (bool ( ::Monocle::Entity::* )( ::Monocle::Vector2 const & ) )( &::Monocle::Entity::IsPositionInGraphic )
            , ( bp::arg("position") ) )    
        .def( 
            "ReceiveNote"
            , (void ( Entity_wrapper::* )( ::std::string const &,::std::string const & ) )(&Entity_wrapper::ReceiveNote)
            , ( bp::arg("tag"), bp::arg("note") ) )    
        .def( 
            "Remove"
            , (void ( ::Monocle::Entity::* )( ::Monocle::Entity * ) )( &::Monocle::Entity::Remove )
            , ( bp::arg("entity") ) )    
        .def( 
            "RemoveTag"
            , (void ( ::Monocle::Entity::* )( ::std::string const & ) )( &::Monocle::Entity::RemoveTag )
            , ( bp::arg("tag") ) )    
        .def( 
            "Removed"
            , (void ( ::Monocle::Entity::* )(  ) )(&::Monocle::Entity::Removed)
            , (void ( Entity_wrapper::* )(  ) )(&Entity_wrapper::default_Removed) )    
        .def( 
            "Render"
            , (void ( ::Monocle::Entity::* )(  ) )(&::Monocle::Entity::Render)
            , (void ( Entity_wrapper::* )(  ) )(&Entity_wrapper::default_Render) )    
        .def( 
            "SendNote"
            , (void ( Entity_wrapper::* )( ::std::string const &,::std::string const & ) )(&Entity_wrapper::SendNote)
            , ( bp::arg("tag"), bp::arg("note") ) )    
        .def( 
            "SendNoteToScene"
            , (void ( Entity_wrapper::* )( ::std::string const & ) )(&Entity_wrapper::SendNoteToScene)
            , ( bp::arg("note") ) )    
        .def( 
            "SetCollider"
            , (void ( ::Monocle::Entity::* )( ::Monocle::Collider * ) )( &::Monocle::Entity::SetCollider )
            , ( bp::arg("collider") ) 
			, bp::with_custodian_and_ward_postcall< 1, 2 >())    
        .def( 
            "SetGraphic"
            , (void ( ::Monocle::Entity::* )( ::Monocle::Graphic * ) )( &::Monocle::Entity::SetGraphic )
            , ( bp::arg("graphic") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())    
        .def( 
            "SetLayer"
            , (void ( ::Monocle::Entity::* )( int ) )( &::Monocle::Entity::SetLayer )
            , ( bp::arg("layer") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())    
        .def( 
            "Update"
            , (void ( ::Monocle::Entity::* )(  ) )(&::Monocle::Entity::Update)
            , (void ( Entity_wrapper::* )(  ) )(&Entity_wrapper::default_Update) )    
        .def_readwrite( "color", &Monocle::Entity::color )    
        .def_readwrite( "depth", &Monocle::Entity::depth )    
        .def_readwrite( "isVisible", &Monocle::Entity::isVisible )    
        .def_readwrite( "position", &Monocle::Entity::position )    
        .def_readwrite( "rotation", &Monocle::Entity::rotation )    
        .def_readwrite( "scale", &Monocle::Entity::scale )    
        .add_property( "scene"
                    , bp::make_function( (::Monocle::Scene * (*)( ::Monocle::Entity const & ))(&Entity_wrapper::get_scene), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Monocle::Entity &,::Monocle::Scene * ))(&Entity_wrapper::set_scene), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );

    bp::class_< FloatTweener_wrapper, bp::bases< Monocle::Tweener >, boost::noncopyable >( "FloatTweener", bp::no_init )    
        .def( 
            "Update"
            , (void ( FloatTweener_wrapper::* )(  ) )(&FloatTweener_wrapper::Update) );

    bp::class_< Graphic_wrapper, boost::noncopyable >( "Graphic" )    
        .def( 
            "GetWidthHeight"
            , bp::pure_virtual( (void ( ::Monocle::Graphic::* )( int *,int * ) )(&::Monocle::Graphic::GetWidthHeight) )
            , ( bp::arg("width"), bp::arg("height") ) )    
        .def( 
            "Render"
            , bp::pure_virtual( (void ( ::Monocle::Graphic::* )(  ) )(&::Monocle::Graphic::Render) ) )    
        .add_property( "entity"
                    , bp::make_function( (::Monocle::Entity * (*)( ::Monocle::Graphic const & ))(&Graphic_wrapper::get_entity), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Monocle::Graphic &,::Monocle::Entity * ))(&Graphic_wrapper::set_entity), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "position", &Monocle::Graphic::position );

    bp::class_< Sprite_wrapper, bp::bases< Monocle::Graphic > >( "Sprite", bp::init< std::string const &, bp::optional< float, float > >(( bp::arg("filename"), bp::arg("width")=-0x000000001, bp::arg("height")=-0x000000001 )) )    
        .def( bp::init< std::string const &, Monocle::FilterType, bp::optional< float, float > >(( bp::arg("filename"), bp::arg("filter"), bp::arg("width")=-0x000000001, bp::arg("height")=-0x000000001 )) )    
        .def( bp::init< >() )    
        .def( 
            "GetWidthHeight"
            , (void ( ::Monocle::Sprite::* )( int *,int * ) )(&::Monocle::Sprite::GetWidthHeight)
            , (void ( Sprite_wrapper::* )( int *,int * ) )(&Sprite_wrapper::default_GetWidthHeight)
            , ( bp::arg("width"), bp::arg("height") ) )    
        .def( 
            "Render"
            , (void ( ::Monocle::Sprite::* )(  ) )(&::Monocle::Sprite::Render)
            , (void ( Sprite_wrapper::* )(  ) )(&Sprite_wrapper::default_Render) )    
        .def_readwrite( "height", &Monocle::Sprite::height )    
        .def_readwrite( "showBounds", Monocle::Sprite::showBounds )    
        .add_property( "texture"
                    , bp::make_function( (::Monocle::TextureAsset * (*)( ::Monocle::Sprite const & ))(&Sprite_wrapper::get_texture), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Monocle::Sprite &,::Monocle::TextureAsset * ))(&Sprite_wrapper::set_texture), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "textureOffset", &Monocle::Sprite::textureOffset )    
        .def_readwrite( "textureScale", &Monocle::Sprite::textureScale )    
        .def_readwrite( "width", &Monocle::Sprite::width );

	bp::class_< SpriteAnimation_wrapper, bp::bases< Monocle::Sprite > >( "SpriteAnimation", bp::init< std::string const &, Monocle::FilterType, float, float >(( bp::arg("filename"), bp::arg("filter"), bp::arg("width"), bp::arg("height") )) )    
        .def( 
            "Add"
            , (void ( ::Monocle::SpriteAnimation::* )( ::std::string const &,int,int,float ) )( &::Monocle::SpriteAnimation::Add )
            , ( bp::arg("name"), bp::arg("start"), bp::arg("end"), bp::arg("speed") ) )    
        .def( 
            "GetAnim"
            , (::Monocle::Anim * ( ::Monocle::SpriteAnimation::* )( ::std::string const & ) )( &::Monocle::SpriteAnimation::GetAnim )
            , ( bp::arg("name"))
            ,    bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "Play"
            , (void ( ::Monocle::SpriteAnimation::* )( ::std::string const & ) )( &::Monocle::SpriteAnimation::Play )
            , ( bp::arg("name") ) )    
        .def( 
            "Render"
            , (void ( ::Monocle::SpriteAnimation::* )(  ) )(&::Monocle::SpriteAnimation::Render)
            , (void ( SpriteAnimation_wrapper::* )(  ) )(&SpriteAnimation_wrapper::default_Render) )    
        .def( 
            "Stop"
            , (void ( ::Monocle::SpriteAnimation::* )( ::std::string const & ) )( &::Monocle::SpriteAnimation::Stop )
            , ( bp::arg("name") ) )    
        .add_property( "animation"
                    , bp::make_function( (::Monocle::Anim * (*)( ::Monocle::SpriteAnimation const & ))(&SpriteAnimation_wrapper::get_animation), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Monocle::SpriteAnimation &,::Monocle::Anim * ))(&SpriteAnimation_wrapper::set_animation), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "animations", &Monocle::SpriteAnimation::animations )    
        .def( 
            "GetWidthHeight"
            , (void ( ::Monocle::Sprite::* )( int *,int * ) )(&::Monocle::Sprite::GetWidthHeight)
            , (void ( SpriteAnimation_wrapper::* )( int *,int * ) )(&SpriteAnimation_wrapper::default_GetWidthHeight)
            , ( bp::arg("width"), bp::arg("height") ) );

    bp::class_< FringeTile_wrapper, bp::bases< Monocle::Sprite > >( "FringeTile", bp::init< Monocle::FringeTileset *, int >(( bp::arg("fringeTileset"), bp::arg("tileID") )) )    
        .def( 
            "GetFringeTileset"
            , (::Monocle::FringeTileset * ( ::Monocle::FringeTile::* )(  ) )( &::Monocle::FringeTile::GetFringeTileset )
            ,  bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetTileID"
            , (int ( ::Monocle::FringeTile::* )(  ) )( &::Monocle::FringeTile::GetTileID ) )    
        .def( 
            "NextTile"
            , (void ( ::Monocle::FringeTile::* )(  ) )( &::Monocle::FringeTile::NextTile ) )    
        .def( 
            "PrevTile"
            , (void ( ::Monocle::FringeTile::* )(  ) )( &::Monocle::FringeTile::PrevTile ) )    
        .def( 
            "SetTileID"
            , (void ( ::Monocle::FringeTile::* )( int ) )( &::Monocle::FringeTile::SetTileID )
            , ( bp::arg("tileID") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())    
        .def( 
            "GetWidthHeight"
            , (void ( ::Monocle::Sprite::* )( int *,int * ) )(&::Monocle::Sprite::GetWidthHeight)
            , (void ( FringeTile_wrapper::* )( int *,int * ) )(&FringeTile_wrapper::default_GetWidthHeight)
            , ( bp::arg("width"), bp::arg("height") ) )    
        .def( 
            "Render"
            , (void ( ::Monocle::Sprite::* )(  ) )(&::Monocle::Sprite::Render)
            , (void ( FringeTile_wrapper::* )(  ) )(&FringeTile_wrapper::default_Render) );

    bp::class_< Monocle::FringeTileData >( "FringeTileData", bp::init< >() )    
        .def( bp::init< std::string const &, bp::optional< int, int, bool, bool > >(( bp::arg("imageFilename"), bp::arg("width")=(int)(-0x000000001), bp::arg("height")=(int)(-0x000000001), bp::arg("repeatX")=(bool)(false), bp::arg("repeatY")=(bool)(false) )) )    
        .def_readwrite( "height", &Monocle::FringeTileData::height )    
        .def_readwrite( "imageFilename", &Monocle::FringeTileData::imageFilename )    
        .def_readwrite( "repeatX", &Monocle::FringeTileData::repeatX )    
        .def_readwrite( "repeatY", &Monocle::FringeTileData::repeatY )    
        .def_readwrite( "width", &Monocle::FringeTileData::width );

    { //::Monocle::FringeTileset
        typedef bp::class_< Monocle::FringeTileset > FringeTileset_exposer_t;
        FringeTileset_exposer_t FringeTileset_exposer = FringeTileset_exposer_t( "FringeTileset", bp::init< std::string const & >(( bp::arg("name") )) );
        bp::scope FringeTileset_scope( FringeTileset_exposer );
        bp::implicitly_convertible< std::string const &, Monocle::FringeTileset >();
        { //::Monocle::FringeTileset::GetFringeTileDataByID
        
            typedef ::Monocle::FringeTileData const * ( ::Monocle::FringeTileset::*GetFringeTileDataByID_function_type )( int ) ;
            
            FringeTileset_exposer.def( 
                "GetFringeTileDataByID"
                , GetFringeTileDataByID_function_type( &::Monocle::FringeTileset::GetFringeTileDataByID )
                , ( bp::arg("tileID") )
                ,   bp::return_value_policy<bp::reference_existing_object>() );
        
        }
        { //::Monocle::FringeTileset::GetName
        
            typedef ::std::string const & ( ::Monocle::FringeTileset::*GetName_function_type )(  ) ;
            
            FringeTileset_exposer.def( 
                "GetName"
                , GetName_function_type( &::Monocle::FringeTileset::GetName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::Monocle::FringeTileset::GetNextTileID
        
            typedef int ( ::Monocle::FringeTileset::*GetNextTileID_function_type )( int ) ;
            
            FringeTileset_exposer.def( 
                "GetNextTileID"
                , GetNextTileID_function_type( &::Monocle::FringeTileset::GetNextTileID )
                , ( bp::arg("tileID") ) );
        
        }
        { //::Monocle::FringeTileset::GetPrevTileID
        
            typedef int ( ::Monocle::FringeTileset::*GetPrevTileID_function_type )( int ) ;
            
            FringeTileset_exposer.def( 
                "GetPrevTileID"
                , GetPrevTileID_function_type( &::Monocle::FringeTileset::GetPrevTileID )
                , ( bp::arg("tileID") ) );
        
        }
        { //::Monocle::FringeTileset::IsName
        
            typedef bool ( ::Monocle::FringeTileset::*IsName_function_type )( ::std::string const & ) ;
            
            FringeTileset_exposer.def( 
                "IsName"
                , IsName_function_type( &::Monocle::FringeTileset::IsName )
                , ( bp::arg("name") ) );
        
        }
        { //::Monocle::FringeTileset::SetFringeTileData
        
            typedef void ( ::Monocle::FringeTileset::*SetFringeTileData_function_type )( int,::Monocle::FringeTileData * ) ;
            
            FringeTileset_exposer.def( 
                "SetFringeTileData"
                , SetFringeTileData_function_type( &::Monocle::FringeTileset::SetFringeTileData )
                , ( bp::arg("tileID"), bp::arg("fringeTileData") )
				, bp::with_custodian_and_ward_postcall< 1, 2 >());
        
        }
    }

    bp::class_< Game_wrapper >( "Game", bp::init< >() )    
        .def( 
            "GetScene"
            , (::Monocle::Scene * (*)(  ))( &::Monocle::Game::GetScene )
            ,  bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "Init"
            , (void ( ::Monocle::Game::* )(  ) )(&::Monocle::Game::Init)
            , (void ( Game_wrapper::* )(  ) )(&Game_wrapper::default_Init) )    
        .def( 
            "Main"
            , (void ( ::Monocle::Game::* )(  ) )( &::Monocle::Game::Main ) )    
        .def( 
            "Quit"
            , (void (*)(  ))( &::Monocle::Game::Quit ) )    
        .def( 
            "ReceiveNote"
            , (void ( ::Monocle::Game::* )( ::std::string const & ) )(&::Monocle::Game::ReceiveNote)
            , (void ( Game_wrapper::* )( ::std::string const & ) )(&Game_wrapper::default_ReceiveNote)
            , ( bp::arg("note") ) )    
        .def( 
            "SetScene"
            , (void (*)( ::Monocle::Scene * ))( &::Monocle::Game::SetScene )
            , ( bp::arg("scene") ))
        .staticmethod( "GetScene" )    
        .staticmethod( "Quit" )    
        .staticmethod( "SetScene" );

    bp::class_< Monocle::Graphics >( "Graphics", bp::init< >() )    
        .def( 
            "AdjustCameraPosition"
            , (void (*)( ::Monocle::Vector2 const & ))( &::Monocle::Graphics::AdjustCameraPosition )
            , ( bp::arg("adjustment") ) )    
        .def( 
            "AdjustCameraZoom"
            , (void (*)( ::Monocle::Vector2 const & ))( &::Monocle::Graphics::AdjustCameraZoom )
            , ( bp::arg("adjustment") ) )    
        .def( 
            "BeginFrame"
            , (void ( ::Monocle::Graphics::* )(  ) )( &::Monocle::Graphics::BeginFrame ) )    
        .def( 
            "BindTexture"
            , (void (*)( ::Monocle::TextureAsset * ))( &::Monocle::Graphics::BindTexture )
            , ( bp::arg("textureAsset") ) )    
        .def( 
            "Blend"
            , (void (*)(  ))( &::Monocle::Graphics::Blend ) )    
        .def( 
            "EndFrame"
            , (void ( ::Monocle::Graphics::* )(  ) )( &::Monocle::Graphics::EndFrame ) )    
        .def( 
            "GetCameraPosition"
            , (::Monocle::Vector2 const & (*)(  ))( &::Monocle::Graphics::GetCameraPosition )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetCameraZoom"
            , (::Monocle::Vector2 const & (*)(  ))( &::Monocle::Graphics::GetCameraZoom )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetMatrixPosition"
            , (::Monocle::Vector2 (*)(  ))( &::Monocle::Graphics::GetMatrixPosition ) )    
        .def( 
            "GetVirtualHeight"
            , (int (*)(  ))( &::Monocle::Graphics::GetVirtualHeight ) )    
        .def( 
            "GetVirtualWidth"
            , (int (*)(  ))( &::Monocle::Graphics::GetVirtualWidth ) )    
        .def( 
            "Init"
            , (void ( ::Monocle::Graphics::* )(  ) )( &::Monocle::Graphics::Init ) )    
        .def( 
            "PopMatrix"
            , (void (*)(  ))( &::Monocle::Graphics::PopMatrix ) )    
        .def( 
            "PushMatrix"
            , (void (*)(  ))( &::Monocle::Graphics::PushMatrix ) )    
        .def( 
            "RenderLineRect"
            , (void (*)( float,float,float,float ))( &::Monocle::Graphics::RenderLineRect )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") ) )    
        .def( 
            "RenderQuad"
            , (void (*)( float,float,::Monocle::Vector2 const &,::Monocle::Vector2 const &,::Monocle::Vector2 const & ))( &::Monocle::Graphics::RenderQuad )
            , ( bp::arg("width"), bp::arg("height"), bp::arg("textureOffset")=Monocle::Vector2::zero, bp::arg("textureScale")=Monocle::Vector2::one, bp::arg("position")=Monocle::Vector2::zero ) )    
        .def( 
            "RenderTriangle"
            , (void (*)( float ))( &::Monocle::Graphics::RenderTriangle )
            , ( bp::arg("size") ) )    
        .def( 
            "Resize"
            , (void (*)( int,int ))( &::Monocle::Graphics::Resize )
            , ( bp::arg("w"), bp::arg("h") ) )    
        .def( 
            "ResolutionMatrix"
            , (void (*)(  ))( &::Monocle::Graphics::ResolutionMatrix ) )    
        .def( 
            "Rotate"
            , (void (*)( float,float,float,float ))( &::Monocle::Graphics::Rotate )
            , ( bp::arg("r"), bp::arg("ax"), bp::arg("ay"), bp::arg("az") ) )    
        .def( 
            "Scale"
            , (void (*)( ::Monocle::Vector2 const & ))( &::Monocle::Graphics::Scale )
            , ( bp::arg("pos") ) )    
        .def( 
            "SceneMatrix"
            , (void (*)(  ))( &::Monocle::Graphics::SceneMatrix ) )    
        .def( 
            "Set2D"
            , (void (*)( int,int ))( &::Monocle::Graphics::Set2D )
            , ( bp::arg("virtualWidth"), bp::arg("virtualHeight") ))
        .def( 
            "Set3D"
            , (void (*)(  ))( &::Monocle::Graphics::Set3D ))
        .def( 
            "SetBackgroundColor"
            , (void (*)( ::Monocle::Color const & ))( &::Monocle::Graphics::SetBackgroundColor )
            , ( bp::arg("color") ))
        .def( 
            "SetCameraPosition"
            , (void (*)( ::Monocle::Vector2 const & ))( &::Monocle::Graphics::SetCameraPosition )
            , ( bp::arg("position") ))
        .def( 
            "SetColor"
            , (void (*)( ::Monocle::Color const & ))( &::Monocle::Graphics::SetColor )
            , ( bp::arg("color") ))
        .def( 
            "SetResolution"
            , (bool ( ::Monocle::Graphics::* )( int,int,int,bool ) )( &::Monocle::Graphics::SetResolution )
            , ( bp::arg("w"), bp::arg("h"), bp::arg("bits"), bp::arg("full") ))
        .def( 
            "ShowBuffer"
            , (void ( ::Monocle::Graphics::* )(  ) )( &::Monocle::Graphics::ShowBuffer ) )    
        .def( 
            "Translate"
            , (void (*)( float,float,float ))( &::Monocle::Graphics::Translate )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) )    
        .def( 
            "Translate"
            , (void (*)( ::Monocle::Vector2 ))( &::Monocle::Graphics::Translate )
            , ( bp::arg("pos") ) )    
        .def_readwrite( "screenCenter", Monocle::Graphics::screenCenter )    
        .staticmethod( "AdjustCameraPosition" )    
        .staticmethod( "AdjustCameraZoom" )    
        .staticmethod( "BindTexture" )    
        .staticmethod( "Blend" )    
        .staticmethod( "GetCameraPosition" )    
        .staticmethod( "GetCameraZoom" )    
        .staticmethod( "GetMatrixPosition" )    
        .staticmethod( "GetVirtualHeight" )    
        .staticmethod( "GetVirtualWidth" )    
        .staticmethod( "PopMatrix" )    
        .staticmethod( "PushMatrix" )    
        .staticmethod( "RenderLineRect" )    
        .staticmethod( "RenderQuad" )    
        .staticmethod( "RenderTriangle" )    
        .staticmethod( "Resize" )    
        .staticmethod( "ResolutionMatrix" )    
        .staticmethod( "Rotate" )    
        .staticmethod( "Scale" )    
        .staticmethod( "SceneMatrix" )    
        .staticmethod( "Set2D" )    
        .staticmethod( "Set3D" )    
        .staticmethod( "SetBackgroundColor" )    
        .staticmethod( "SetCameraPosition" )    
        .staticmethod( "SetColor" )    
        .staticmethod( "Translate" );

    bp::class_< Monocle::Input >( "Input", bp::init< >() )    
        .def( 
            "DefineMaskKey"
            , (void (*)( ::std::string const &,::Monocle::KeyCode ))( &::Monocle::Input::DefineMaskKey )
            , ( bp::arg("mask"), bp::arg("keyCode") ) )    
        .def( 
            "GetMaskKeys"
            , (::std::list< Monocle::KeyCode > * (*)( ::std::string const & ))( &::Monocle::Input::GetMaskKeys )
            , ( bp::arg("mask") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )   
        .def( 
            "GetMousePosition"
            , (::Monocle::Vector2 (*)(  ))( &::Monocle::Input::GetMousePosition ) )    
        .def( 
            "GetWorldMousePosition"
            , (::Monocle::Vector2 (*)(  ))( &::Monocle::Input::GetWorldMousePosition ) )    
        .def( 
            "Init"
            , (void ( ::Monocle::Input::* )(  ) )( &::Monocle::Input::Init ) )    
        .def( 
            "IsKeyHeld"
            , (bool (*)( ::Monocle::KeyCode ))( &::Monocle::Input::IsKeyHeld )
            , ( bp::arg("keyCode") ) )    
        .def( 
            "IsKeyMaskHeld"
            , (bool (*)( ::std::string const & ))( &::Monocle::Input::IsKeyMaskHeld )
            , ( bp::arg("mask") ) )    
        .def( 
            "IsKeyMaskPressed"
            , (bool (*)( ::std::string const & ))( &::Monocle::Input::IsKeyMaskPressed )
            , ( bp::arg("mask") ) )    
        .def( 
            "IsKeyMaskReleased"
            , (bool (*)( ::std::string const & ))( &::Monocle::Input::IsKeyMaskReleased )
            , ( bp::arg("mask") ) )    
        .def( 
            "IsKeyPressed"
            , (bool (*)( ::Monocle::KeyCode ))( &::Monocle::Input::IsKeyPressed )
            , ( bp::arg("keyCode") ) )    
        .def( 
            "IsKeyReleased"
            , (bool (*)( ::Monocle::KeyCode ))( &::Monocle::Input::IsKeyReleased )
            , ( bp::arg("keyCode") ) )    
        .def( 
            "IsMouseButtonHeld"
            , (bool (*)( ::Monocle::MouseButton ))( &::Monocle::Input::IsMouseButtonHeld )
            , ( bp::arg("mouseButton") ) )    
        .def( 
            "IsMouseButtonPressed"
            , (bool (*)( ::Monocle::MouseButton ))( &::Monocle::Input::IsMouseButtonPressed )
            , ( bp::arg("mouseButton") ) )    
        .def( 
            "IsMouseButtonReleased"
            , (bool (*)( ::Monocle::MouseButton ))( &::Monocle::Input::IsMouseButtonReleased )
            , ( bp::arg("mouseButton") ) )    
        .def( 
            "MaskHasKey"
            , (bool (*)( ::std::string const &,::Monocle::KeyCode ))( &::Monocle::Input::MaskHasKey )
            , ( bp::arg("mask"), bp::arg("keyCode") ) )    
        .def( 
            "UndefineMaskAll"
            , (void (*)( ::std::string const & ))( &::Monocle::Input::UndefineMaskAll )
            , ( bp::arg("mask") ) )    
        .def( 
            "UndefineMaskKey"
            , (void (*)( ::std::string const &,::Monocle::KeyCode ))( &::Monocle::Input::UndefineMaskKey )
            , ( bp::arg("mask"), bp::arg("keyCode") ) )    
        .def( 
            "Update"
            , (void ( ::Monocle::Input::* )(  ) )( &::Monocle::Input::Update ) )    
        .staticmethod( "DefineMaskKey" )    
        .staticmethod( "GetMaskKeys" )    
        .staticmethod( "GetMousePosition" )    
        .staticmethod( "GetWorldMousePosition" )    
        .staticmethod( "IsKeyHeld" )    
        .staticmethod( "IsKeyMaskHeld" )    
        .staticmethod( "IsKeyMaskPressed" )    
        .staticmethod( "IsKeyMaskReleased" )    
        .staticmethod( "IsKeyPressed" )    
        .staticmethod( "IsKeyReleased" )    
        .staticmethod( "IsMouseButtonHeld" )    
        .staticmethod( "IsMouseButtonPressed" )    
        .staticmethod( "IsMouseButtonReleased" )    
        .staticmethod( "MaskHasKey" )    
        .staticmethod( "UndefineMaskAll" )    
        .staticmethod( "UndefineMaskKey" );

    bp::class_< Scene_wrapper >( "Scene", bp::init< >() )    
        .def( 
            "Add"
            , (void ( ::Monocle::Scene::* )( ::Monocle::Entity * ) )( &::Monocle::Scene::Add )
            , ( bp::arg("entity") ) )    
        .def( 
            "Begin"
            , (void ( ::Monocle::Scene::* )(  ) )(&::Monocle::Scene::Begin)
            , (void ( Scene_wrapper::* )(  ) )(&Scene_wrapper::default_Begin) )    
        .def( 
            "End"
            , (void ( ::Monocle::Scene::* )(  ) )(&::Monocle::Scene::End)
            , (void ( Scene_wrapper::* )(  ) )(&Scene_wrapper::default_End) )    
        .def( 
            "EntityAddTag"
            , (void ( ::Monocle::Scene::* )( ::Monocle::Entity *,::std::string const & ) )( &::Monocle::Scene::EntityAddTag )
            , ( bp::arg("entity"), bp::arg("tag") ) )    
        .def( 
            "EntityRemoveTag"
            , (void ( ::Monocle::Scene::* )( ::Monocle::Entity *,::std::string const & ) )( &::Monocle::Scene::EntityRemoveTag )
            , ( bp::arg("entity"), bp::arg("tag") ) )    
        .def( 
            "GetAllTag"
            , (::std::list< Monocle::Entity* > * ( ::Monocle::Scene::* )( ::std::string const & ) )( &::Monocle::Scene::GetAllTag )
            , ( bp::arg("tag") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetAmountTag"
            , (int ( ::Monocle::Scene::* )( ::std::string const & ) )( &::Monocle::Scene::GetAmountTag )
            , ( bp::arg("tag") ) )    
        .def( 
            "GetEntity"
            , (::Monocle::Entity * ( ::Monocle::Scene::* )( int ) )( &::Monocle::Scene::GetEntity )
            , ( bp::arg("index") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetEntityAtPosition"
            , (::Monocle::Entity * ( ::Monocle::Scene::* )( ::Monocle::Vector2 const &,::Monocle::SearchType ) )( &::Monocle::Scene::GetEntityAtPosition )
            , ( bp::arg("position"), bp::arg("searchType")=::Monocle::SEARCH_TOP )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetFirstTag"
            , (::Monocle::Entity * ( ::Monocle::Scene::* )( ::std::string const & ) )( &::Monocle::Scene::GetFirstTag )
            , ( bp::arg("tag") )
            ,  bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetNearestEntity"
            , (::Monocle::Entity * ( ::Monocle::Scene::* )( ::Monocle::Vector2 const &,::Monocle::Entity * ) )( &::Monocle::Scene::GetNearestEntity )
            , ( bp::arg("position"), bp::arg("ignoreEntity")=bp::object() )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetNearestEntityByControlPoint"
            , (::Monocle::Entity * ( ::Monocle::Scene::* )( ::Monocle::Vector2 const &,::Monocle::Entity * ) )( &::Monocle::Scene::GetNearestEntityByControlPoint )
            , ( bp::arg("position"), bp::arg("ignoreEntity")=bp::object() )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "GetNearestEntityContaining"
            , (::Monocle::Entity * ( ::Monocle::Scene::* )( ::Monocle::Vector2 const &,::Monocle::Entity * ) )( &::Monocle::Scene::GetNearestEntityContaining )
            , ( bp::arg("position"), bp::arg("ignoreEntity")=bp::object() )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "ReceiveNote"
            , (void ( Scene_wrapper::* )( ::std::string const & ) )(&Scene_wrapper::ReceiveNote)
            , ( bp::arg("note") ) )    
        .def( 
            "Remove"
            , (void ( ::Monocle::Scene::* )( ::Monocle::Entity * ) )( &::Monocle::Scene::Remove )
            , ( bp::arg("entity") ) )    
        .def( 
            "RemoveAll"
            , (void ( ::Monocle::Scene::* )(  ) )( &::Monocle::Scene::RemoveAll ) )    
        .def( 
            "Render"
            , (void ( ::Monocle::Scene::* )(  ) )( &::Monocle::Scene::Render ) )    
        .def( 
            "Update"
            , (void ( ::Monocle::Scene::* )(  ) )(&::Monocle::Scene::Update)
            , (void ( Scene_wrapper::* )(  ) )(&Scene_wrapper::default_Update) );

    bp::class_< Monocle::Level >( "Level", bp::init< >() )    
        .def( 
            "AddFringeTile"
            , (::Monocle::FringeTile * (*)( ::Monocle::FringeTileset *,int,int,::Monocle::Vector2 const &,::Monocle::Vector2 const &,int ))( &::Monocle::Level::AddFringeTile )
            , ( bp::arg("fringeTileset"), bp::arg("tileID"), bp::arg("layer"), bp::arg("position"), bp::arg("scale"), bp::arg("rotation") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "End"
            , (void (*)(  ))( &::Monocle::Level::End ) )    
        .def( 
            "GetFringeTileForEntity"
            , (::Monocle::FringeTile * (*)( ::Monocle::Entity * ))( &::Monocle::Level::GetFringeTileForEntity )
            , ( bp::arg("entity") )
            ,   bp::return_value_policy<bp::reference_existing_object>() )    
        .def( 
            "Init"
            , (void ( ::Monocle::Level::* )(  ) )( &::Monocle::Level::Init ) )    
        .def( 
            "Load"
            , (void (*)( ::std::string const &,::Monocle::Scene * ))( &::Monocle::Level::Load )
            , ( bp::arg("filename"), bp::arg("scene")=bp::object() ) )    
        .def( 
            "LoadProject"
            , (void (*)( ::std::string const & ))( &::Monocle::Level::LoadProject )
            , ( bp::arg("filename") ) )    
        .def( 
            "RemoveFringeTile"
            , (void (*)( ::Monocle::FringeTile * ))( &::Monocle::Level::RemoveFringeTile )
            , ( bp::arg("fringeTile") ) )    
        .def( 
            "Save"
            , (void (*)(  ))( &::Monocle::Level::Save ) )    
        .def( 
            "SaveAs"
            , (void (*)( ::std::string const & ))( &::Monocle::Level::SaveAs )
            , ( bp::arg("filename") ) )    
        .def( 
            "SetScene"
            , (void (*)( ::Monocle::Scene * ))( &::Monocle::Level::SetScene )
            , ( bp::arg("scene") ))
        .def_readwrite( "fringeTiles", &Monocle::Level::fringeTiles )    
        .def_readwrite( "fringeTilesets", &Monocle::Level::fringeTilesets )    
        .def_readwrite( "height", &Monocle::Level::height )    
        .def_readwrite( "name", &Monocle::Level::name )    
        .def_readwrite( "tilemaps", &Monocle::Level::tilemaps )    
        .def_readwrite( "tilesets", &Monocle::Level::tilesets )    
        .def_readwrite( "width", &Monocle::Level::width )    
        .staticmethod( "AddFringeTile" )    
        .staticmethod( "End" )    
        .staticmethod( "GetFringeTileForEntity" )    
        .staticmethod( "Load" )    
        .staticmethod( "LoadProject" )    
        .staticmethod( "RemoveFringeTile" )    
        .staticmethod( "Save" )    
        .staticmethod( "SaveAs" )    
        .staticmethod( "SetScene" );

    { //::Monocle::Platform
        typedef bp::class_< Platform_wrapper > Platform_exposer_t;
        Platform_exposer_t Platform_exposer = Platform_exposer_t( "Platform", bp::init< >() );
        bp::scope Platform_scope( Platform_exposer );
        { //::Monocle::Platform::GetHeight
        
            typedef int ( *GetHeight_function_type )(  );
            
            Platform_exposer.def( 
                "GetHeight"
                , GetHeight_function_type( &::Monocle::Platform::GetHeight ) );
        
        }
        { //::Monocle::Platform::GetMilliseconds
        
            typedef long int ( *GetMilliseconds_function_type )(  );
            
            Platform_exposer.def( 
                "GetMilliseconds"
                , GetMilliseconds_function_type( &::Monocle::Platform::GetMilliseconds ) );
        
        }
        { //::Monocle::Platform::GetWidth
        
            typedef int ( *GetWidth_function_type )(  );
            
            Platform_exposer.def( 
                "GetWidth"
                , GetWidth_function_type( &::Monocle::Platform::GetWidth ) );
        
        }
        { //::Monocle::Platform::Init
        
            typedef void ( ::Monocle::Platform::*Init_function_type )(  ) ;
            
            Platform_exposer.def( 
                "Init"
                , Init_function_type( &::Monocle::Platform::Init ) );
        
        }
        { //::Monocle::Platform::Init
        
            typedef void ( ::Monocle::Platform::*Init_function_type )( int,int,int,bool ) ;
            
            Platform_exposer.def( 
                "Init"
                , Init_function_type( &::Monocle::Platform::Init )
                , ( bp::arg("w"), bp::arg("h"), bp::arg("bits"), bp::arg("fullscreen") ) );
        
        }
        { //::Monocle::Platform::IsKeyPressed
        
            typedef bool ( *IsKeyPressed_function_type )( ::Monocle::KeyCode );
            
            Platform_exposer.def( 
                "IsKeyPressed"
                , IsKeyPressed_function_type( &::Monocle::Platform::IsKeyPressed )
                , ( bp::arg("keyCode") ) );
        
        }
        { //::Monocle::Platform::IsTouchEnabled
        
            typedef bool ( *IsTouchEnabled_function_type )(  );
            
            Platform_exposer.def( 
                "IsTouchEnabled"
                , IsTouchEnabled_function_type( &::Monocle::Platform::IsTouchEnabled ) );
        
        }
        { //::Monocle::Platform::SetLocalKey
        
            typedef void ( *SetLocalKey_function_type )( int,bool );
            
            Platform_exposer.def( 
                "SetLocalKey"
                , SetLocalKey_function_type( &::Monocle::Platform::SetLocalKey )
                , ( bp::arg("key"), bp::arg("on") )
				, bp::with_custodian_and_ward_postcall< 1, 2 >());
        
        }
        { //::Monocle::Platform::SetMouseButton
        
            typedef void ( *SetMouseButton_function_type )( int,bool );
            
            Platform_exposer.def( 
                "SetMouseButton"
                , SetMouseButton_function_type( &::Monocle::Platform::SetMouseButton )
                , ( bp::arg("button"), bp::arg("on") )
				, bp::with_custodian_and_ward_postcall< 1, 2 >());
        
        }
        { //::Monocle::Platform::ShowBuffer
        
            typedef void ( *ShowBuffer_function_type )(  );
            
            Platform_exposer.def( 
                "ShowBuffer"
                , ShowBuffer_function_type( &::Monocle::Platform::ShowBuffer ) );
        
        }
        { //::Monocle::Platform::Update
        
            typedef void ( ::Monocle::Platform::*Update_function_type )(  ) ;
            
            Platform_exposer.def( 
                "Update"
                , Update_function_type( &::Monocle::Platform::Update ) );
        
        }
        { //::Monocle::Platform::WindowSizeChanged
        
            typedef void ( ::Monocle::Platform::*WindowSizeChanged_function_type )( int,int ) ;
            
            Platform_exposer.def( 
                "WindowSizeChanged"
                , WindowSizeChanged_function_type( &::Monocle::Platform::WindowSizeChanged )
                , ( bp::arg("w"), bp::arg("h") ) );
        
        }
        pyplusplus::containers::static_sized::register_array_1< bool, 323 >( "__array_1_bool_323" );
        { //Monocle::Platform::keys [variable], type=bool[323]
        
            typedef pyplusplus::containers::static_sized::array_1_t< bool, 323> ( *array_wrapper_creator )( ::Monocle::Platform & );
            
            Platform_exposer.add_static_property( "keys"
                , bp::make_function( array_wrapper_creator(&Platform_wrapper::pyplusplus_keys_wrapper) ) );
        }
        pyplusplus::containers::static_sized::register_array_1< bool, 3 >( "__array_1_bool_3" );
        { //Monocle::Platform::mouseButtons [variable], type=bool[3]
        
            typedef pyplusplus::containers::static_sized::array_1_t< bool, 3> ( *array_wrapper_creator )( ::Monocle::Platform & );
            
            Platform_exposer.add_static_property( "mouseButtons"
                , bp::make_function( array_wrapper_creator(&Platform_wrapper::pyplusplus_mouseButtons_wrapper) ) );
        }
        Platform_exposer.def_readwrite( "mousePosition", Monocle::Platform::mousePosition );
        Platform_exposer.staticmethod( "GetHeight" );
        Platform_exposer.staticmethod( "GetMilliseconds" );
        Platform_exposer.staticmethod( "GetWidth" );
        Platform_exposer.staticmethod( "IsKeyPressed" );
        Platform_exposer.staticmethod( "IsTouchEnabled" );
        Platform_exposer.staticmethod( "SetLocalKey" );
        Platform_exposer.staticmethod( "SetMouseButton" );
        Platform_exposer.staticmethod( "ShowBuffer" );
    }

    bp::class_< Monocle::Random >( "Random", bp::init< >() )    
        .def( 
            "Range"
            , (int (*)( int,int ))( &::Monocle::Random::Range )
            , ( bp::arg("start"), bp::arg("end") ) )    
        .def( 
            "Seed"
            , (void (*)( unsigned int ))( &::Monocle::Random::Seed )
            , ( bp::arg("seed") ) )    
        .staticmethod( "Range" )    
        .staticmethod( "Seed" );

    bp::class_< RectangleCollider_wrapper, bp::bases< Monocle::Collider > >( "RectangleCollider", bp::init< float, float, bp::optional< Monocle::Vector2 > >(( bp::arg("width"), bp::arg("height"), bp::arg("offset")=Monocle::Vector2::zero )) )    
        .def( 
            "GetBottom"
            , (float ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetBottom )
            , ( bp::arg("relativeToEntity")=(bool)(false) ) )    
        .def( 
            "GetBottomLeft"
            , (::Monocle::Vector2 const & ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetBottomLeft )
            , ( bp::arg("relativeToEntity")=(bool)(false) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetBottomRight"
            , (::Monocle::Vector2 const & ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetBottomRight )
            , ( bp::arg("relativeToEntity")=(bool)(false) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetColliderType"
            , (::Monocle::ColliderType ( ::Monocle::RectangleCollider::* )(  ) )(&::Monocle::RectangleCollider::GetColliderType)
            , (::Monocle::ColliderType ( RectangleCollider_wrapper::* )(  ) )(&RectangleCollider_wrapper::default_GetColliderType) )    
        .def( 
            "GetLeft"
            , (float ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetLeft )
            , ( bp::arg("relativeToEntity")=(bool)(false) ) )    
        .def( 
            "GetRight"
            , (float ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetRight )
            , ( bp::arg("relativeToEntity")=(bool)(false) ) )    
        .def( 
            "GetTop"
            , (float ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetTop )
            , ( bp::arg("relativeToEntity")=(bool)(false) ) )    
        .def( 
            "GetTopLeft"
            , (::Monocle::Vector2 const & ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetTopLeft )
            , ( bp::arg("relativeToEntity")=(bool)(false) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetTopRight"
            , (::Monocle::Vector2 const & ( ::Monocle::RectangleCollider::* )( bool ) )( &::Monocle::RectangleCollider::GetTopRight )
            , ( bp::arg("relativeToEntity")=(bool)(false) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "IntersectsLine"
            , (bool ( ::Monocle::RectangleCollider::* )( ::Monocle::Vector2 const &,::Monocle::Vector2 const & ) )(&::Monocle::RectangleCollider::IntersectsLine)
            , (bool ( RectangleCollider_wrapper::* )( ::Monocle::Vector2 const &,::Monocle::Vector2 const & ) )(&RectangleCollider_wrapper::default_IntersectsLine)
            , ( bp::arg("start"), bp::arg("end") ) )    
        .def( 
            "IntersectsPoint"
            , (bool ( ::Monocle::RectangleCollider::* )( ::Monocle::Vector2 const & ) )(&::Monocle::RectangleCollider::IntersectsPoint)
            , (bool ( RectangleCollider_wrapper::* )( ::Monocle::Vector2 const & ) )(&RectangleCollider_wrapper::default_IntersectsPoint)
            , ( bp::arg("point") ) )    
        .def_readwrite( "height", &Monocle::RectangleCollider::height )    
        .def_readwrite( "width", &Monocle::RectangleCollider::width );

    bp::class_< TextureAsset_wrapper, bp::bases< Monocle::Asset > >( "TextureAsset", bp::init< >() )    
        .def( 
            "Bind"
            , (void ( ::Monocle::TextureAsset::* )(  ) )( &::Monocle::TextureAsset::Bind ) )    
        .def( 
            "Load"
            , (void ( ::Monocle::TextureAsset::* )( ::std::string const &,::Monocle::FilterType,bool,bool ) )( &::Monocle::TextureAsset::Load )
            , ( bp::arg("filename"), bp::arg("filter"), bp::arg("repeatX"), bp::arg("repeatY") ) )    
        .def( 
            "Reload"
            , (void ( ::Monocle::TextureAsset::* )(  ) )(&::Monocle::TextureAsset::Reload)
            , (void ( TextureAsset_wrapper::* )(  ) )(&TextureAsset_wrapper::default_Reload) )    
        .def( 
            "Unload"
            , (void ( ::Monocle::TextureAsset::* )(  ) )(&::Monocle::TextureAsset::Unload)
            , (void ( TextureAsset_wrapper::* )(  ) )(&TextureAsset_wrapper::default_Unload) )    
        .def_readwrite( "filter", &Monocle::TextureAsset::filter )    
        .def_readwrite( "height", &Monocle::TextureAsset::height )    
        .def_readwrite( "repeatX", &Monocle::TextureAsset::repeatX )    
        .def_readwrite( "repeatY", &Monocle::TextureAsset::repeatY )    
        .def_readwrite( "texID", &Monocle::TextureAsset::texID )    
        .def_readwrite( "width", &Monocle::TextureAsset::width );

    bp::class_< Tilemap_wrapper, bp::bases< Monocle::Graphic > >( "Tilemap", bp::init< Monocle::Tileset *, int, int, int, int >(( bp::arg("tileset"), bp::arg("width"), bp::arg("height"), bp::arg("tileWidth"), bp::arg("tileHeight") )) )    
        .def( 
            "Clear"
            , (void ( ::Monocle::Tilemap::* )( int ) )( &::Monocle::Tilemap::Clear )
            , ( bp::arg("tileID")=(int)(-0x000000001) ) )    
        .def( 
            "GetTile"
            , (int ( ::Monocle::Tilemap::* )( int,int ) )( &::Monocle::Tilemap::GetTile )
            , ( bp::arg("tx"), bp::arg("ty") ) )    
        .def( 
            "GetTileAtWorldPosition"
            , (int ( ::Monocle::Tilemap::* )( ::Monocle::Vector2 const & ) )( &::Monocle::Tilemap::GetTileAtWorldPosition )
            , ( bp::arg("position") ) )    
        .def( 
            "GetWidthHeight"
            , (void ( ::Monocle::Tilemap::* )( int *,int * ) )(&::Monocle::Tilemap::GetWidthHeight)
            , (void ( Tilemap_wrapper::* )( int *,int * ) )(&Tilemap_wrapper::default_GetWidthHeight)
            , ( bp::arg("width"), bp::arg("height") ) )    
        .def( 
            "IsTile"
            , (bool ( ::Monocle::Tilemap::* )( int,int,int ) )( &::Monocle::Tilemap::IsTile )
            , ( bp::arg("tx"), bp::arg("ty"), bp::arg("tileID") ) )    
        .def( 
            "Render"
            , (void ( ::Monocle::Tilemap::* )(  ) )(&::Monocle::Tilemap::Render)
            , (void ( Tilemap_wrapper::* )(  ) )(&Tilemap_wrapper::default_Render) )    
        .def( 
            "Resize"
            , (void ( ::Monocle::Tilemap::* )( int,int ) )( &::Monocle::Tilemap::Resize )
            , ( bp::arg("width"), bp::arg("height") ) )    
        .def( 
            "SetTile"
            , (void ( ::Monocle::Tilemap::* )( int,int,int ) )( &::Monocle::Tilemap::SetTile )
            , ( bp::arg("tx"), bp::arg("ty"), bp::arg("tileID") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())
        .def( 
            "SetTileAtWorldPosition"
            , (void ( ::Monocle::Tilemap::* )( ::Monocle::Vector2 const &,int ) )( &::Monocle::Tilemap::SetTileAtWorldPosition )
            , ( bp::arg("position"), bp::arg("tileID") )
			, bp::with_custodian_and_ward_postcall< 1, 2 >())
        .def( 
            "WorldToTile"
            , (void ( ::Monocle::Tilemap::* )( ::Monocle::Vector2 const &,int *,int * ) )( &::Monocle::Tilemap::WorldToTile )
            , ( bp::arg("position"), bp::arg("tx"), bp::arg("ty") ) )    
        .add_property( "texture"
                    , bp::make_function( (::Monocle::TextureAsset * (*)( ::Monocle::Tilemap const & ))(&Tilemap_wrapper::get_texture), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Monocle::Tilemap &,::Monocle::TextureAsset * ))(&Tilemap_wrapper::set_texture), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );

    bp::class_< Tileset_wrapper >( "Tileset", bp::init< std::string const &, std::string const &, float, float >(( bp::arg("name"), bp::arg("filename"), bp::arg("tileWidth"), bp::arg("tileHeight") )) )    
        .def_readwrite( "name", &Monocle::Tileset::name )    
        .add_property( "texture"
                    , bp::make_function( (::Monocle::TextureAsset * (*)( ::Monocle::Tileset const & ))(&Tileset_wrapper::get_texture), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Monocle::Tileset &,::Monocle::TextureAsset * ))(&Tileset_wrapper::set_texture), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "tileHeight", &Monocle::Tileset::tileHeight )    
        .def_readwrite( "tileWidth", &Monocle::Tileset::tileWidth );

    bp::class_< Monocle::Touch >( "Touch" )    
        .def_readwrite( "position", &Monocle::Touch::position );

    bp::class_< Monocle::Tween >( "Tween", bp::init< >() )    
        .def( 
            "Clear"
            , (void (*)(  ))( &::Monocle::Tween::Clear ) )    
        .def( 
            "Ease"
            , (float (*)( float,::Monocle::EaseType ))( &::Monocle::Tween::Ease )
            , ( bp::arg("p"), bp::arg("easeType") ) )    
        .def( 
            "FromTo"
            , (void (*)( float *,float const &,float const &,float,::Monocle::EaseType ))( &::Monocle::Tween::FromTo )
            , ( bp::arg("value"), bp::arg("start"), bp::arg("end"), bp::arg("time"), bp::arg("easeType") ) )    
        .def( 
            "FromTo"
            , (void (*)( ::Monocle::Vector2 *,::Monocle::Vector2 const &,::Monocle::Vector2 const &,float,::Monocle::EaseType ))( &::Monocle::Tween::FromTo )
            , ( bp::arg("value"), bp::arg("start"), bp::arg("end"), bp::arg("time"), bp::arg("easeType") ) )    
        .def( 
            "FromTo"
            , (void (*)( ::Monocle::Color *,::Monocle::Color const &,::Monocle::Color const &,float,::Monocle::EaseType ))( &::Monocle::Tween::FromTo )
            , ( bp::arg("value"), bp::arg("start"), bp::arg("end"), bp::arg("time"), bp::arg("easeType") ) )    
        .def( 
            "Remove"
            , (void (*)( ::Monocle::Tweener * ))( &::Monocle::Tween::Remove )
            , ( bp::arg("tweener") ) )    
        .def( 
            "To"
            , (void (*)( float *,float const &,float,::Monocle::EaseType ))( &::Monocle::Tween::To )
            , ( bp::arg("value"), bp::arg("end"), bp::arg("time"), bp::arg("easeType") ) )    
        .def( 
            "To"
            , (void (*)( ::Monocle::Vector2 *,::Monocle::Vector2 const &,float,::Monocle::EaseType ))( &::Monocle::Tween::To )
            , ( bp::arg("value"), bp::arg("end"), bp::arg("time"), bp::arg("easeType") ) )    
        .def( 
            "To"
            , (void (*)( ::Monocle::Color *,::Monocle::Color const &,float,::Monocle::EaseType ))( &::Monocle::Tween::To )
            , ( bp::arg("value"), bp::arg("end"), bp::arg("time"), bp::arg("easeType") ) )    
        .def( 
            "Update"
            , (void (*)(  ))( &::Monocle::Tween::Update ) )    
        .staticmethod( "Clear" )    
        .staticmethod( "Ease" )    
        .staticmethod( "FromTo" )    
        .staticmethod( "Remove" )    
        .staticmethod( "To" )    
        .staticmethod( "Update" );

    bp::class_< Vector2Tweener_wrapper, bp::bases< Monocle::Tweener >, boost::noncopyable >( "Vector2Tweener", bp::no_init )    
        .def( 
            "Update"
            , (void ( Vector2Tweener_wrapper::* )(  ) )(&Vector2Tweener_wrapper::Update) );

    bp::class_< Monocle::Vector3 >( "Vector3", bp::init< >() )    
        .def( bp::init< float, float, float >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) )    
        .def_readwrite( "down", Monocle::Vector3::down )    
        .def_readwrite( "left", Monocle::Vector3::left )    
        .def_readwrite( "one", Monocle::Vector3::one )    
        .def_readwrite( "right", Monocle::Vector3::right )    
        .def_readwrite( "up", Monocle::Vector3::up )    
        .def_readwrite( "x", &Monocle::Vector3::x )    
        .def_readwrite( "y", &Monocle::Vector3::y )    
        .def_readwrite( "z", &Monocle::Vector3::z )    
        .def_readwrite( "zero", Monocle::Vector3::zero );

	bp::class_< Monocle_wrapper >( "Monocle", bp::init< >() )
		.def_readonly("deltaTime",&::Monocle_wrapper::get_deltaTime)
		.def_readonly("deg2Rad",&::Monocle_wrapper::get_deg2Rad)
		.def_readonly("rad2Deg",&::Monocle_wrapper::get_rad2Deg)
		.def_readonly("pi",&::Monocle_wrapper::get_pi)
		.def_readonly("timeSinceStart",&::Monocle_wrapper::get_timeSinceStart)
		.def("OpenURL",&::Monocle_wrapper::OpenURL,bp::arg("url"))
		.def("GetWorkingDirectory",&::Monocle_wrapper::GetWorkingDirectory);
	{ //MIN

		bp::def("MIN",&::Macro_wrapper::MIN,(bp::arg("a"),bp::arg("b")));
	}
	{ //MAX

		bp::def("MAX",&::Macro_wrapper::MAX ,(bp::arg("a"),bp::arg("b")));
	}
	{ //CLAMP

		bp::def("CLAMP",&::Macro_wrapper::CLAMP,(bp::arg("a"),bp::arg("min"),bp::arg("max")));
	}
	{ //SIGN

		bp::def("SIGN",&::Macro_wrapper::SIGN,(bp::arg("value"),bp::arg("to")));
	}
	{ //APPROACH

		bp::def("APPROACH",&::Macro_wrapper::APPROACH,(bp::arg("value"),bp::arg("target"),bp::arg("amount")));
	}
	{ //LERP

		bp::def("LERP",&::Macro_wrapper::LERP,(bp::arg("a"),bp::arg("b"),bp::arg("t")));
	}
   /* { //::Monocle::GetWorkingDirectory
    
        typedef ::std::string ( *GetWorkingDirectory_function_type )(  );
        
        bp::def( 
            "GetWorkingDirectory"
            , GetWorkingDirectory_function_type( &::Monocle::GetWorkingDirectory ) );
    
    }

    { //::Monocle::OpenURL
    
        typedef void ( *OpenURL_function_type )( ::std::string const & );
        
        bp::def( 
            "OpenURL"
            , OpenURL_function_type( &::Monocle::OpenURL )
            , ( bp::arg("url") ) );
    
    }

    bp::scope().attr("deg2Rad") = Monocle::deg2Rad;

    bp::scope().attr("deltaTime") = Monocle::deltaTime;

    bp::scope().attr("pi") = Monocle::pi;

    bp::scope().attr("rad2Deg") = Monocle::rad2Deg;

    bp::scope().attr("timeSinceStart") = Monocle::timeSinceStart;*/
}
