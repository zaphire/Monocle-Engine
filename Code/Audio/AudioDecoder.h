//
//  AudioDecoder.h
//  MonocleTest
//
//  Created by Josh Whelchel on 4/19/11.
//

#pragma once

#include <string>

#include "VisCache2.h"

namespace Monocle
{
    class AudioAsset;
    class AudioDecoder;
    
    class AudioDecodeData
    {
    public:
        
        /**
             @param samplerate Samplerate of the audio to be generated in samples per second (hz).  This is typically 44100, 22050, etc.
             The AudioDecoder is expected to generate audio in an acceptable format by the output engine and won't be 
             converted by the engine or AudioDeck.
         
            @param bit Bitrate of the audio generated by the decoder. Either 8 or 16.
         
            @param ch Number of channels the decoder will generate. Either 2 (stereo) or 1 (mono).
         
            @param decoder Pointer to the decoder.
         
            @param audAsset Pointer to the AudioAsset which should be associated with this decodedata - may be null.
         */
        AudioDecodeData( int samplerate, int bit, int ch, AudioDecoder *decoder, void *decoderData, AudioAsset *audAsset );
        ~AudioDecodeData();
        
        // Source Sound info... (set by the decoder)
        
        /**
            Samplerate of the audio to be generated in samples per second (hz).  This is typically 44100, 22050, etc.
            The AudioDecoder is expected to generate audio in an acceptable format by the output engine and won't be 
            converted by the engine or AudioDeck.
         */
        int samplerate;			// Sample Rate (44100, 22050, etc)
        
        /**
            Bitrate of the audio generated by the decoder. Either 8 or 16.
         */
        int bit;				// Bits (8, 16)
        
        /**
            Number of channels the decoder will generate. Either 2 (stereo) or 1 (mono).
         */
        int ch;					// Channels (1, 2)
        
        // # Loops remaining
        // This value is initially set by the scene, and should then be handled by the decoder.
        // A value of -1 should represent infinite looping.
        
        /**
            Number of loops remaining in the playback cycle. This will typically be set by the AudioDeck, but the decoder
            should then be responsible for decrementing it and seeking to the beginning of the track when neccessary.
            If it is set to -1 then the decoder should loop indefinitely.
         */
        int loopsRemaining;
        
        /**
            Total length in milliseconds of the track, regardless of the number of loops specified by loopsRemaining. 
         */
        unsigned long total;
        
        /**
            Initially set to -1 to indicate no seeking, the AudioDeck will adjust this value if the decoder should
            seek to an offset specified in milliseconds.
         */
        long seekOffset;
        
        /**
            The AudioDecoder should set this boolean to true when the decoder has decoded the entire file and has exhausted
            all loops specified by loopsRemaining.
         */
        bool outOfData;				// Set to true when no more data is to be generated (and the decoder has exhausted all loops...)
      
        /**
            Pointer to the AudioDecoder (which should be set by the AudioDecoder)
         */
        AudioDecoder *decoder;
        
        /**
            Pointer to the AudioAsset. Generally this should not be null, but can be.
         */
        AudioAsset *audAsset;
        
        /**
            Pointer to data specific to the AudioDecoder. Typically this will point to a structure defined within the specific
            implementation of the AudioDecoder for storing specific information.
         */
        void *decoderData;
    };
    
    /**
        Interface for decoding audio and feeding raw audio samples to an AudioDeck.
     
        @see AudioDecodeData
     */
    class AudioDecoder
    {
    public:
        
        /**
            Needs to be called by the inheriting AudioDecoder to register the extensions with the Audio engine.
            
            @param extension Extensions the AudioDecoder should be associated with. Multiple file extensions can be specified with spaces. "ogg ogv" etc.
         */
        AudioDecoder( std::string extension );
        ~AudioDecoder() { };
        
        /**
            Returns an AudioDecodeData with information about an AudioAsset. This is called by Audio::NewDeck() when
            provided an AudioAsset.  This is where a decoder would initialize any information about a particular audio file,
            including its sample rate, number of channels, and bits. It should also initialize the length.
         
            AudioDecoders do NOT store information globally nor per instance.  Only one instance of the decoder should
            exist ideally (unless alternative settings apply to variations in HOW the audio is decoded).
         
            @return AudioDecodeData with appropriate variables set.
         */
        virtual AudioDecodeData *RequestData( AudioAsset *asset )=0;
        
        /**
            Renders audio samples for the AudioDeck to stream to the engine. The output buffer should be
            filled with unsigned char for 8 bit and signed shorts for 16 bit audio.  If stereo, the two
            channels should alternate.
         
            @param size Specifies the size of the output buffer in bytes (not samples!).
            @param outputBuffer Provides a pointer to the data buffer for the audio.
            @param decodeData Points to the AudioDecodeData with information about this particular instance.
         */
        virtual unsigned long Render( unsigned long size, void *outputBuffer, AudioDecodeData &decodeData)=0;
        
        /**
            Responsible for freeing the decoderData inside of an AudioDecodeData. This function SHOULD NOT free or delete
            the AudioDecodeData itself.
         */
        virtual void FreeDecoderData( AudioDecodeData &dd )=0;
        
    protected:
        
    };
}

/*
 typedef int (WINAPI * onu_init_callback)( onu_deck_cable_s *cable );
 typedef void (WINAPI * onu_free_callback)( onu_deck_cable_s *cable );
 typedef int (WINAPI * onu_getversion_callback)( );
 typedef void (WINAPI * onu_freecable_callback)( onu_deck_cable_s *cable );
 typedef int (WINAPI * onu_seek_callback)( onu_deck_cable_s *cable, long pos );
 typedef void (WINAPI * onu_setcacheinfo_callback)( onu_deck_cable_s *cable, long *data1, long *data2, long *data3, long *data4 );
*/