/*
 * This file was automatically generated by AutoBind.
 * Any changes made to this file will be lost when it
 * is next regenerated.
 */

#include "autobind/types.h"
#include "autobind/binding/lua.h"
#include "Object.h"
#include "InvalidObjectThrownException.h"

namespace Engine
{
    /* Variable assignments */
    const char* InvalidObjectThrownException::Message = "An object was thrown that does not inherit Engine.Exception, and therefore the meaning of the exception could not be understood.";

    /* Method and constructor definitions */
    InvalidObjectThrownException::InvalidObjectThrownException()
    {
        }

	/// <summary>
	/// Exception constructor for Lua code.
	/// </summary>
    InvalidObjectThrownException::InvalidObjectThrownException(lua_State * L, bool byuser)
    {
        }

	/// <summary>
	/// Returns the static Message variable.  Required for downcasting.
	/// <summary>
    const char* InvalidObjectThrownException::GetMessage()
    {
        return this->Message;
	}

	/// <summary>
	/// Returns the static ClassName variable.  Required for downcasting.
	/// <summary>
    const char* InvalidObjectThrownException::GetName()
    {
        return this->ClassName;
	}

	/// <summary>
	/// A property to access the exception message.
	/// </summary>
	/// <readonly>true</readonly>
    int InvalidObjectThrownException::GetMessageL(lua_State * L)
    {

        return Bindings<::string>::Result(L, Engine::Exception::GetParsedMessage(this->Message, this->Arguments).c_str());
	}

    /* Automatic dispatchers for overloaded methods */
    /* Automatic property getter-setter definitions */
    /* Binding variables */
    const char* InvalidObjectThrownException::ClassName = "Engine.InvalidObjectThrownException";
    const char* InvalidObjectThrownException::Inherits = "Engine.EngineException";
    const Bindings<InvalidObjectThrownException>::FunctionType InvalidObjectThrownException::Functions[] =
    {
        {0}
    };
    const Bindings<InvalidObjectThrownException>::PropertyType InvalidObjectThrownException::Properties[] =
    {
        {"Message", &InvalidObjectThrownException::GetMessageL, NULL},
        {0}
    };
    int (__cdecl *InvalidObjectThrownException::Dispatcher)(lua_State * L) = &(Bindings<InvalidObjectThrownException>::FunctionDispatch);
} 

