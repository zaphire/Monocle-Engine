/*
 * This file was automatically generated by AutoBind.
 * Any changes made to this file will be lost when it
 * is next regenerated.
 */

#include "autobind/types.h"
#include "autobind/binding/lua.h"
#include "Object.h"
#include "PermissionDeniedException.h"

namespace Engine
{
    /* Variable assignments */
    const char* PermissionDeniedException::Message = "The current user or application was not permitted to access the specified resource '${1}'.";

    /* Method and constructor definitions */
    PermissionDeniedException::PermissionDeniedException(std::string resource)
    {
        this->Arguments.insert(this->Arguments.end(), resource);
	}

	/// <summary>
	/// Exception constructor for Lua code.
	/// </summary>
    PermissionDeniedException::PermissionDeniedException(lua_State * L, bool byuser)
    {
        ::string resource = Bindings<::string>::GetArgumentBase(L, 1);

        this->Arguments.insert(this->Arguments.end(), resource);
	}

	/// <summary>
	/// Returns the static Message variable.  Required for downcasting.
	/// <summary>
    const char* PermissionDeniedException::GetMessage()
    {
        return this->Message;
	}

	/// <summary>
	/// Returns the static ClassName variable.  Required for downcasting.
	/// <summary>
    const char* PermissionDeniedException::GetName()
    {
        return this->ClassName;
	}

	/// <summary>
	/// A property to access the exception message.
	/// </summary>
    int PermissionDeniedException::GetMessageL(lua_State * L)
    {

        return Bindings<::string>::Result(L, Engine::Exception::GetParsedMessage(this->Message, this->Arguments).c_str());
	}

    int PermissionDeniedException::SetMessageL(lua_State * L)
    {
        ::string value = Bindings<::string>::GetArgumentBase(L, -1);

        throw new Engine::ReadOnlyPropertyException();
	}

    /* Automatic dispatchers for overloaded methods */
    /* Automatic property getter-setter definitions */
    /* Binding variables */
    const char* PermissionDeniedException::ClassName = "Engine.PermissionDeniedException";
    const char* PermissionDeniedException::Inherits = "Engine.EngineException";
    const Bindings<PermissionDeniedException>::FunctionType PermissionDeniedException::Functions[] =
    {
        {0}
    };
    const Bindings<PermissionDeniedException>::PropertyType PermissionDeniedException::Properties[] =
    {
        {"Message", &PermissionDeniedException::GetMessageL, &PermissionDeniedException::SetMessageL},
        {0}
    };
    int (__cdecl *PermissionDeniedException::Dispatcher)(lua_State * L) = &(Bindings<PermissionDeniedException>::FunctionDispatch);
} 

