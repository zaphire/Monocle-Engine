/*
 * This file was automatically generated by AutoBind.
 * Any changes made to this file will be lost when it
 * is next regenerated.
 */

#include "autobind/types.h"
#include "autobind/binding/lua.h"
#include "Object.h"
#include "Platform.h"
#include "InternalConstructorOnlyException.h"
#include "Platforms/Backend.h"
#include "Platforms/Windows/Backend.h"

namespace Engine
{
    /* Variable assignments */

    /* Method and constructor definitions */
    Platform::Platform(lua_State * L, bool byuser)
    {
        if (byuser)
			throw new Engine::InternalConstructorOnlyException();
		this->m_Backend = NULL;
	}

    Platform::Platform()
    {
        this->m_Backend = NULL;
	}

    void Platform::Init()
    {
        // Here we initalize the backend to Windows.  When other platforms are implemented,
		// you'll need to work out which one to initalize using #ifdefs.
		this->m_Backend = new Native::Windows::Backend();
	}

    void Platform::Update()
    {
        this->m_Backend->Update();
	}

    bool Platform::IsKeyPressed()
    {
        }

    void Platform::ShowBuffer()
    {
        this->m_Backend->ShowBuffer();
	}

	/// <summary>
	/// Returns the number of milliseconds since the system started.
	/// </summary>
    long Platform::GetMilliseconds()
    {
        return this->m_Backend->GetMilliseconds();
	}

    /* Automatic dispatchers for overloaded methods */
    /* Automatic property getter-setter definitions */
    /* Binding variables */
    const char* Platform::ClassName = "Engine.Platform";
    const char* Platform::Inherits = "Object";
    const Bindings<Platform>::FunctionType Platform::Functions[] =
    {
        {0}
    };
    const Bindings<Platform>::PropertyType Platform::Properties[] =
    {
        {0}
    };
    int (__cdecl *Platform::Dispatcher)(lua_State * L) = &(Bindings<Platform>::FunctionDispatch);
} 

